#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Valeriu Smirichinski
#

#######################################################################################################
#
# Release: This file is part of the openkim-api.git repository.
#
# See KIM_API/standard.kim for documentation about this file
#
#######################################################################################################


SystemOfUnitsFix := fixed    # can work only with units system defined bellow
# SystemOfUnitsFix := flexible # can reset entire units system (default for model)

# This is is the input file that defines KIM API variables
# all field strting with # are comments and ignored
# it contains section MODEL_INPUT or MODEL_OUPUT
# followed by lines, that defines variable in the following format
#
# Name                  Type         Unit       SystemU/Scale           Shape              requirements
#
# Name -- unique name of variables
# Type -- real,double,integer,integer*8, pointer -- tells underlying structure of an element
# Unit -- physical unit dimension of variable -- none, length,time, mass, ...
# SystemU/Scale -- name of the system units (metal, KIMstandard,...) or numerical scale factor to the standard units
# Shape -- enclossed in square brackets size of each tensor dimensions for example
#          [4,3] -- will describe second rank tensor, number of elemnets 12, fastest changing index has size 3
#          [N,3,3,3] -- rank 4 index with unspecified size = N*3*3*3 and aslo slowest index has size N.
#          [NumberAtoms,3] -- rank 2 tensor,  size of the first index is defined by variable NumberAtoms
#          []  -- means scalar (or rank zero tensor)
# requirements -- it is empty field if variable is needed always or field set to optional, meaning that you can 
#                 switch off calculation of the variable

SUPPORTED_ATOM/PARTICLES_TYPES:
# Simbol/name           Type        code
#Ar                      spec                    18                      # Argon


MODEL_INPUT:
# Name                  Type         Unit       SystemU/Scale           Shape              requirements

numberOfParticles           integer*8    none       none                    []                              # empty [] means rank is zero

numberParticleTypes         integer      none       none                    []

particleTypes           integer      none       none                    [numberOfParticles]                 # one [flag] -- rank is one

coordinates             double       length     standard                [numberOfParticles,3]

neighObject             pointer      none       none                    []                              # neighbor list object that is used by iterator

get_half_neigh          method       none       none                    []

get_full_neigh          method       none       none                    []


MODEL_OUTPUT:
# Name                  Type         Unit       SystemU/Scale           Shape                   requirements

compute                 method       none       none                    []

destroy                 method       none       none                    []

cutoff                  double       length     standard                []

energy                  double       energy     standard                []

forces                  double       force      standard                [numberOfParticles,3]

particleEnergy           double       energy     standard                [numberOfParticles]

CONVENTIONS:
# Name                  Type

OneBasedLists           flag        # presence of this line indicates that indexes for atoms are from 1 to numberOfParticles

Neigh_BothAccess        flag        # need both: locator and iterator

NEIGH_PURE_H            flag        # scenario method to deal with neighbor list and boundary condition

NEIGH_PURE_F            flag 

NEIGH_RVEC_F            flag 

CLUSTER			flag
