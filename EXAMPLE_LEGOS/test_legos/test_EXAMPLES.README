This file contains a table of information about the example Tests included with
this release of the openkim-api package.

***  List of the example Tests  ***

Test name                                 Language  NBC             Loca/Iter  Half/Full
----------------------------------------------------------------------------------------

test_Al_FCCcohesive_MI_OPBC               F90       MI-OPBC-H       Locator    Half
                                                    MI-OPBC-F       Iterator   Full

test_Al_free_cluster                      F90       NEIGH-RVEC-F    Locator    Full
                                                    NEIGH-PURE-H    Iterator   Half
                                                    NEIGH-PURE-F
                                                    MI-OPBC-H
                                                    MI-OPBC-F

test_ArNe_periodic_B2_NEIGH_RVEC          F90       NEIGH-RVEC-F    Locator    Full
                                                                    Iterator

test_Ar_FCCcohesiveCutoff_NEIGH_RVEC      F90       NEIGH-RVEC-F    Locator    Full
                                                                    Iterator

test_Ar_FCCcohesive_MI_OPBC               F90       MI-OPBC-H       Locator    Half
                                                    MI-OPBC-F       Iterator   Full

test_Ar_FCCcohesive_NEIGH_PURE            F90       NEIGH-PURE-H    Locator    Half
                                                    NEIGH-PURE-F    Iterator   Full

test_Ar_FCCcohesive_NEIGH_RVEC            F90       NEIGH-RVEC-F    Locator    Full
                                                                    Iterator

test_Ar_free_cluster                      F90       NEIGH-RVEC-F    Locator    Full
                                                    NEIGH-PURE-H    Iterator   Half
                                                    NEIGH-PURE-F
                                                    MI-OPBC-H
                                                    MI-OPBC-F

test_Ar_free_cluster_CLUSTER_C            C         CLUSTER         N/A        N/A

test_Ar_free_cluster_CLUSTER_F90          F90       CLUSTER         N/A        N/A

test_Ar_multiple_models                   C         NEIGH-RVEC-F    Locator    Full
                                                                    Iterator

test_Ne_free_cluster                      F90       NEIGH-RVEC-F    Locator    Full
                                                    NEIGH-PURE-H    Iterator   Half
                                                    NEIGH-PURE-F
                                                    MI-OPBC-H
                                                    MI-OPBC-F
----------------------------------------------------------------------------------------


***  Example Test/Model compatibility  ***


test_Al_FCCcohesive_MI_OPBC
   |
   |-- model_Al_PF_ErcolessiAdams
   |


test_Al_free_cluster
   |
   |-- model_Al_PF_ErcolessiAdams
   |


test_ArNe_B2cohesive_NEIGH_RVEC
   |
   |-- model_ArNe_P_MLJ_NEIGH_RVEC_F
   |


test_Ar_FCCcohesiveCutoff_NEIGH_RVEC
   |
   |-- model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MMorse
   |


test_Ar_FCCcohesive_MI_OPBC
   |
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_MI_OPBC_H_F
   |-- model_Ar_P_MMorse
   |


test_Ar_FCCcohesive_NEIGH_PURE
   |
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_NEIGH_PURE_H_F
   |-- model_Ar_P_MMorse
   |


test_Ar_FCCcohesive_NEIGH_RVEC
   |
   |-- model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MMorse
   |


test_Ar_free_cluster
   |
   |-- model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_MI_OPBC_H_F
   |-- model_Ar_P_MLJ_NEIGH_PURE_H_F
   |-- model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MMorse
   |


test_Ar_free_cluster_CLUSTER_C
   |
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_CLUSTER_C
   |-- model_Ar_P_MLJ_CLUSTER_F90
   |-- model_Ar_P_MMorse
   |


test_Ar_free_cluster_CLUSTER_F90
   |
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_CLUSTER_C
   |-- model_Ar_P_MLJ_CLUSTER_F90
   |-- model_Ar_P_MMorse
   |


test_Ar_multiple_models
   |
   |-- model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MLJ_C
   |-- model_Ar_P_MLJ_F90
   |-- model_Ar_P_MLJ_NEIGH_RVEC_F
   |-- model_Ar_P_MMorse
   |


test_Ne_free_cluster
   |
   |-- model_ArNe_P_MLJ_NEIGH_RVEC_F
   |-- model_Ne_P_LJ_NEIGH_PURE_H
   |-- model_Ne_P_MLJ_NEIGH_RVEC_F
   |

----------------------------------------------------------------------------------------


***  Description of the example Tests  ***

A description of the provided example Tests is given below.  The Tests are,
roughly, listed in order of increasing complexity.  It is suggested that
examining the example Tests in this order will provide a gradual introduction
to the various components of a KIM-compliant Test.  (See the README file in the
DOCs directory for guidelines on how to study the Tests distributed with this 
package.)

test_Ar_free_cluster_CLUSTER_C   (C)
test_Ar_free_cluster_CLUSTER_F90 (Fortran 90)
     These Tests are the simplest examples.  Thus, they provide the best
     introduction to the basic steps required for a Test to setup and interact
     with a KIM Model.  They setup a KIM API object for the user's requested
     KIM Model (which must support the CLUSTER neighbor list and boundary
     condition (NBC) method), create a cluster of 63 atoms with positions
     corresponding to a 2x2x2 FCC cubic cell, and compute the total energy and
     force components on each atom.  The results are printed to the screen.
     The only difference between these Tests is that one is written in C and
     the other is written in Fortran 90.

test_Al_free_cluster (Fortran 90)
test_Ar_free_cluster (Fortran 90)
test_Ne_free_cluster (Fortran 90)
     These Tests, all written in Fortran 90, are identical except for the
     atomic species they support.  Thus, it is interesting to compare them to
     see the minor changes needed to support different species.  The Tests do
     exactly the same computation as that performed by the
     test_Ar_free_cluster_CLUSTER_* Tests.  However, instead of the CLUSTER NBC
     method, these Tests implement support for all the other NBC methods:
     MI-OPBC-H, MI-OPBC-F, NEIGH-PURE-H, NEIGH-PURE-F, and NEIGH-RVEC-F.  This
     entails creating neighbor lists for the various NBC methods, and makes
     these Tests a good place to begin to understand the differences between
     these NBC methods.

test_Al_FCCcohesive_MI_OPBC (Fortran 90)
test_Ar_FCCcohesive_MI_OPBC (Fortran 90)
     These Tests, both written in Fortran 90, use the MI-OPBC-H or MI-OPBC-F
     NBC method to compute the relaxed cohesive energy of an infinite perfect
     FCC crystal.  The computation method is tailored specifically to the
     MI-OPBC-[H|F] methods in order to perform the computation in the most
     computationally efficient manner.  The Tests use the Golden section search
     method to find the relaxed FCC lattice parameter.


test_Ar_FCCcohesive_NEIGH_PURE (Fortran 90)
     This Test, written in Fortran 90, uses the NEIGH-PURE-H or NEIGH-PURE-F
     NBC method to compute the relaxed cohesive energy of an infinite perfect
     FCC crystal.  The computation method is tailored specifically to the
     NEIGH-PURE-[H|F] methods in order to perform the computation in the most
     computationally efficient manner.  The Test uses the Golden section search
     method to find the relaxed FCC lattice parameter.


test_Ar_FCCcohesive_NEIGH_RVEC (Fortran 90)
     This Test, written in Fortran 90, uses the NEIGH-RVEC-F NBC method to
     compute the relaxed cohesive energy of an infinite perfect FCC crystal.
     The computation method is tailored specifically to the NEIGH-RVEC-F method
     in order to perform the computation in the most computationally efficient
     manner.  The Test uses the Golden section search method to find the
     relaxed FCC lattice parameter.


test_ArNe_B2cohesive_NEIGH_RVEC (Fortran 90)
     This Test, written in Fortran 90, uses the NEIGH-RVEC-F NBC method to
     compute the relaxed cohesive energy of an infinite perfect B2 (CsCl-type)
     crystal.  The computation method is tailored specifically to the
     NEIGH-RVEC-F method in order to perform the computation in the most
     computationally efficient manner.  The Test uses the Golden section search
     method to find the relaxed B2 lattice parameter.  It is useful to compare
     this Test with the test_Ar_FCCcohesive_NEIGH_RVEC Test to see the changes
     that are required to work with multiple species.


test_Ar_FCCcohesiveCutoff_NEIGH_RVEC (Fortran 90)
     This Test, written in Fortran 90, uses the NEIGH-RVEC-F NBC method to
     compute the relaxed cohesive energy of an infinite perfect FCC crystal for
     five different values of the Model's `cutoff' parameter.  The Test only
     works with Models that publish a `PARAM_FREE_cutoff' parameter, and thus,
     allow the Test to change their cutoff.  The computation method is tailored
     specifically to the NEIGH-RVEC-F method in order to perform the
     computation in the most computationally efficient manner.  The Test uses
     the Golden section search method to find the relaxed FCC lattice
     parameter.  It is useful to compare this Test with the
     test_Ar_FCCcohesive_NEIGH_RVEC Test to see the changes that are required
     for a Test to adjust a Model's parameters.


test_Ar_multiple_models (C)
     This Test, written in C, is the most complex.  It performs all its own
     memory management (i.e., it does not use the KIM_API_allocate() service
     routine).  It also works with two different Models at the same time.
     Further, it performs two separate computations for each Model.  Thus, this
     test illustrates the simultaneous use of multiple KIM API objects for both
     the same Model and different Models.  The Test computes the energy for an
     FCC cluster and an infinite periodic FCC crystal for each Model and prints
     these energy values for a range of FCC lattice spacings.
