#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2014, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#    Ellad B. Tadmor
#    Valeriu Smirichinski
#

#
# Release: This file is part of the openkim-api.git repository.
#


=========================== The openkim-api package ===========================

This file contains instructions for installing the openkim-api package.
If you are new to KIM and the openkim-api (application programming interface)
start by reading the README file in this directory.

-------------------------------------------------------------------------------

SYSTEM REQUIREMENTS

To install the openkim-api package you need the following:

1. A Unix/Linux/Mac OSX/Cygwin system.

2. GNU make (3.81 or later), and

3. GNU compilers (gcc, g++, gfortran) version 4.2.x or higher or the
   corresponding Intel compilers, version 11.1 or higher.  NOTE: gfortran 4.6.x
   is known to have subtle bugs, and SHOULD NOT BE USED with the openkim-api
   software package.

-------------------------------------------------------------------------------

INSTRUCTIONS for installing, compiling and linking this openkim-api release:

0. If you have previously used the openkim-api package (versions 1.1.1 or
   below), it is recommended that you remove all associated environment
   variables from your environment.  (These include, KIM_DIR, KIM_INTEL,
   KIM_SYSTEM32, KIM_DYNAMIC, KIM_API_DIR, KIM_TESTS_DIR,
   KIM_MODEL_DRIVERS_DIR, and KIM_MODELS_DIR.)  All setting are now specified
   in the Makefile.KIM_Config file.

1. Set up the Makefile.KIM_Config file

   (a) Copy the file `Makefile.KIM_Config.example' to `Makefile.KIM_Config'.
       For example, if you untarred the `openkim-api-vX.X.X.tgz' tarball in
       your home directory, you would do:

       % cd $HOME/openkim-api-vX.X.X
       % cp Makefile.KIM_Config.example Makefile.KIM_Config

       The `%' symbol represents the bash sell prompt and should not be typed.

       (Above `vX.X.X' represents the current release number.)

   (b) Edit the file Makefile.KIM_Config and set the appropriate value for the
       KIM_DIR variable.  This must expand to an absolute path.  Using the same
       assumptions as above, this would be

       KIM_DIR = $(HOME)/openkim-api-vX.X.X

   (c) If appropriate, set explicit values for the remaining three directories

       KIM_MODEL_DRIVERS_DIR =
       KIM_MODELS_DIR =
       KIM_TESTS_DIR =

       If these lines are commented out, defaults will be provided by the
       openkim-api make system.

   (d) Set the value of KIM_COMPILERSUITE.  Possible values are `GCC' and
       `INTEL'.

       KIM_COMPILERSUITE = GCC

   (e) Set the value of KIM_SYSTEMLINKER. Possible values are `linux',
       `freebsd', and `darwin'.

       KIM_SYSTEMLINKER = linux

   (f) Set the value of KIM_SYSTEMARCH.  Possible values are `32bit' and
       `64bit'.

       KIM_SYSTEMARCH = 64bit

   (g) Set the value of KIM_LINK.  Possible values are `dynamic-load',
       `dynamic-link', and `static-link'.

       KIM_LINK = dynamic-load

       `dynamic-load' is the preferred option. (Unless performance or other
       issues require it, you should use dynamic-load.)  `dynamic-link' is like
       `dynamic-load' but does not use the dl.h library.  This option requires
       a more complicated Makefile process, but may improve computation time in
       some instances.  `static-link' only works with ONE Model and AT MOST ONE
       Model Driver (in order to avoid the possibility of symbol clashes).

   (h) Set the value of KIM_MAKE_VERBOSITY, if a value other than the default
       is (`quiet') desired.  Possible values are `quite' and `full'.

       KIM_MAKE_VERBOSITY = quiet

   (i) Override default compiler options and other variables, if necessary, by
       adding the desired variable name (after the "# override default compiler
       options and other variables here" line) and filling in appropriate
       values.

       * NOTE: GCC 4.4 requires that LDLIBS be set as
               `LDLIBS = -lgfortran -lgfortranstart' or possibly
               `LD = $(FC)' and `LDLIBS = -lstdc++'.

       * NOTE: As of 2014-01-20, gfortran on Darwin OS (Mac OSX) has a bug
               associated with the use of iso_c_binding Fortran/C
               interoperability features which are now standard in openkim-api.
               (See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59888) We have
               reported this bug and are awaiting its fix.  In the meantime,
               the following workaround has been identified:

               (i) You must have a "multi-library" version of gfortran
                   installed on your mac due the need (see (ii) below) to
                   compile for a 32bit architecture.  This means that GCC must
                   have been configured with the "--enable-multilib" flag.  To
                   check your version execute `gfortran -v' and look for the
                   string "--enable-multilib".  In order to install a multilib
                   version of gfortran on your mac you can use a package
                   manager such as Homebrew, Mac Ports, or fink.  Follow the
                   instructions for installing the package manager of your
                   choice.  Then execute the command to install gfortran.

                   For Homebrew the command is:
                     % brew install gcc

                   For Mac Ports the command is:
                     % sudo port select --set gcc mp-gcc48
                     (Note, this may require that you compile the package from
                      source in order to get the correct version.)

               (ii)  You must compile the openkim-api and associated Models,
                     Tests, etc. using the `KIM_SYSTEMARCH = 32bit' setting.

               (iii) You need to have the following line in this section of the
                     Makefile.KIM_Config file in order to avoid harmless
                     compiler warnings:
                        `LDFLAGS += -read_only_relocs suppress'

       * NOTE: For Cygwin systems add the following line `PICFLAG =' to avoid
               warnings about the -fPIC option.


       # override default compiler options and other variables here

       # override default compiler options
       CC =
       CXX =
       FC =
       LD =

       # override default compiler option flag lists
       FFLAGS   =
       CCFLAGS  =
       CXXFLAGS =
       LDFLAGS  =
       LDLIBS   =

       # override default linker options
       LDSHAREDFLAG =
       LINKSONAME =
       LDWHOLEARCHIVESTARTFLAG =
       LDWHOLEARCHIVEENDFLAG =

       # override default install directories
       package_name = # default is 'openkim-api'
       prefix =       # default is '/usr/local'
       libdir =       # default is '$(prefix)/lib'


2. In the remainder of the documentation we will use the string $KD to
   represent the location of the openkim-api source package (the value of the
   KIM_DIR variable discussed above).  If you wish to, type the below commands
   exactly as written to set the shell variable KD to the appropriate value:

   bash:
   % export KD=$HOME/openkim-api-vX.X.X


3. To compile the package, including the provided examples, change to the
   $KD directory and execute `make examples' and then `make':

   % cd $KD
   % make examples
   % make

     This builds all Model Drivers, Models, Tests, and the openkim-api service
     routine library.  The targets defined by the Makefile in this directory
     include:

       `make'                -- compiles the API and all Models and Tests
       `make all'            -- same as `make'
       `make clean'          -- will remove appropriate .o, .mod, .a, .so and
                                executable files
       `make install'        -- install files to `/usr/local/lib/' by default
                                or to `$(prefix)/lib/' if prefix is specified,
                                or to `$(libdir)/' if libdir is specified
                                (see above).
       `make uninstall'      -- delete files installed by `make install'
       `make openkim-api'    -- compiles only the API
       `make examples'       -- copies examples into the appropriate
                                directories (no overwrite)
       `make examples-force' -- copies examples into the appropriate
                                directories (overwrite)
       `make examples-clean' -- remove all examples from the MODEL_DRIVERS,
                                MODELS, and TESTS directories.

4. Verify that the compilation was successful by running a Test.

   The provided example Tests read in the name of a Model (or Models) which
   they use to perform their calculations.  For most Tests the name of the
   Model can be piped in using an `echo' command.  For example, the following
   Fortran 2003 Test reads in one Model:

   % cd $KD/TESTS/ex_test_Ar_free_cluster_CLUSTER_F03
   % echo "ex_model_Ar_P_MLJ_CLUSTER_C" | ./ex_test_Ar_free_cluster_CLUSTER_F03

  (See the README files in the Test directories for an explanation of what
   the Tests do.)


5. Each Test (and Model) has its own Makefile for compiling and linking.  If
   changes are made to the code, perform the `make' portion of step (3) again
   (from the $KD directory).

6. If you wish, install the KIM API to a system directory.

     % make install

   The compiled versions of the KIM API library, Model Drivers, and Models will
   be copied to `$(libdir)/$(package_name)/KIM_API',
   `$(libdir)/$(package_name)/MODEL_DRIVERS', and
   `$(libdir)/$(package_name)/MODELS', respectively.  The default value for
   libdir is `$(prefix)/lib'.  Additionally, the MAKE_SYSTEM and supporting
   header and mod files will be copied to `$(libdir)/$(package_name)/' to
   support subsequent compilation against the installed KIM API package.

   Once the KIM API package has been installed, the original source directory
   ($KD) may be deleted.

   If the KIM API was compiled with KIM_LINK=dynamic-load, the installed KIM
   API will look for Model Driver and Model directories in three different
   locations.  For Model Drivers these, listed in the order they are searched,
   are:

     `.'                                            ("CWD Model Drivers")
     `$(HOME)/.kim/$(package_name)/MODEL_DRIVERS/'  ("User Model Drivers")
     `$(libdir)/$(package_name)/MODEL_DRIVERS/'     ("System Model Drivers")

   For Models these, listed in the order they are searched, are:

     `.'                                            ("CWD Models")
     `$(HOME)/.kim/$(package_name)/MODELS/'         ("User Models")
     `$(libdir)/$(package_name)/MODELS/'            ("System Models")

   After the KIM API has been installed (and the original source directory has
   been deleted) it is still possible to compile Model Drivers and Models.
   These can be placed in the current working directory (CWD), or installed in
   the user's home directory (under the ${HOME}/.kim/ subdirectory), or
   installed in the system-wide Model Drivers and Models directories.  To
   create a new Model Driver of Model and install it in the appropriate
   system-wide directory or in the user's home directory, follow these steps:

   (a) If it doesn't already exist, create the user directory (note, here I
       will assume that an environment variable ${package_name} is set to the
       same value as package_name in your Makefile.KIM_Config file):

         % mkdir ${HOME}/.kim
         % mkdir ${HOME}/.kim/${package_name}
         % mkdir ${HOME}/.kim/${package_name}/MODEL_DRIVERS
         % mkdir ${HOME}/.kim/${package_name}/MODELS

   (b) Create a Makefile.KIM_Config containing just the following line in each
       of the ${HOME}/.kim/${package_name}/MODEL_DRIVERS and
       ${HOME}/.kim/${package_name}/MODELS directories:

         include $(libdir)/$(package_name)/Makefile.KIM_Config

       Here you should replace $(libdir) and $(package_name) with their
       explicit values so that you get a explicit absolute path to the
       installed version of Makefile.KIM_Config.

   (c) We'll work with the case of a Model (a Model Driver is analogous) such
       as those you can download from openkim.org.  For example, execute the
       following commands:

         % md=EAM_Johnson_NearestNeighbor_Cu__MO_887933271505_000
         % mkdir ${HOME}/.kim/${package_name}/MODELS/${md}
         % cd ${HOME}/.kim/${package_name}/MODELS/${md}/
         % wget --content-disposition "https://kim-items.openkim.org/archive?kimid=${md}&compression=gz"
         % tar zxvf ${md}.tgz
         % rm ${md}.tgz

   (d) Change to the Model directory and execute `make':

         % cd ${HOME}/.kim/${package_name}/MODELS/${md}/${md}
         % make

       Once this compilation completes successfully, you have a new Model
       installed in the user's home directory.  There is no need to perform a
       `make install' in this case.

   (e) If you have the permission to write to the system-wide directories where
       the KIM API Model Drivers and Models are installed and you want to
       install this Model in the appropriate system-wide directory, then you
       can execute the following command in order to do so:

         % make install

       Once this command completes successfully, you have installed the Model
       to the system-wide directory, and you can delete the Model source
       directory:

         % cd ${HOME}/.kim/${package_name}/MODELS/
         % rm -rf ${md}

       NOTE: If the Model is based on a Model Driver (i.e., a Parameterized
             Model), then the associated Model Driver must be installed to the
             system-wide directory before the Parameterized Model is compiled
             and installed.

   To create a Model Driver or Model in the current working directory (CWD),
   follow these steps:

   (a) Create a Makefile.KIM_Config containing just the following line in the
       current directory

         include $(libdir)/$(package_name)/Makefile.KIM_Config

       Here you should replace $(libdir) and $(package_name) with their
       explicit values so that you get a explicit absolute path to the
       installed version of Makefile.KIM_Config.

   (b) We'll work with the case of a Model (a Model Driver is analogous) such
       as those you can download from openkim.org.  For example, execute the
       following commands:

         % md=EAM_Johnson_NearestNeighbor_Cu__MO_887933271505_000
         % mkdir ./${md}
         % cd ./${md}/
         % wget --content-disposition "https://kim-items.openkim.org/archive?kimid=${md}&compression=gz"
         % tar zxvf ${md}.tgz
         % rm ${md}.tgz

   (d) Change to the Model directory and execute `make':

         % cd ./${md}
         % make

       Once this compilation completes successfully, you have a new
       Model in the current working directory (CWD).

   (e) If you have the permission to write to the system-wide directories where
       the KIM API Model Drivers and Models are installed and you want to
       install this Model in the appropriate system-wide directory, then you
       can execute the following command in order to do so:

         % make install

       Once this command completes successfully, you have installed the Model
       to the system-wide directory, and you can delete the Model source
       directory:

         % cd ../
         % rm -rf ${md}

       NOTE: if the Model is based on a Model Driver (i.e., a Parameterized
             Model), then the associated Model Driver must be installed to the
             system-wide directory before the Parameterized Model is compiled
             and installed.


Once the installation is successfully completed, read the README file in
the DOCs directory for a step-by-step guide to learning the openkim-api.

*******************************************************************************

SUPPORT

If you have problems or questions, send an email with your question and all
relevant information to

openkim@googlegroups.com

The members of the openkim development team actively monitor this email list
and will do their best to help you with your question in a timely fashion.

*******************************************************************************
