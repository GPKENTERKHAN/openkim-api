#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2012, Regents of the University of Minnesota.  All rights reserved.
#
# Contributors:
#    Valeriu Smirichinski
#    Ryan S. Elliott
#    Ellad B. Tadmor
#

#
# Release: This file is part of the openkim-api.git repository.
#


=========================== The openkim-api package ===========================

This file contains instructions for installing the openKIM API package.
If you are new to KIM and the openKIM API (application programming interface)
start by reading the README file in this directory.

-------------------------------------------------------------------------------

SYSTEM REQUIREMENTS

To install the openKIM API package you need the following:

1. A Unix/Linux/Mac OSX system.

2. GNU make, and

3. GNU compilers (gcc, g++, gfortran) version 4.2.x or higher or the
   corresponding Intel compilers, version 11.1 or higher.

(See comments below under TROUBLESHOOTING regarding compiler issues.)

-------------------------------------------------------------------------------

INSTRUCTIONS for installing, compiling and linking this openkim-api release:

1. Set up the Makefile.KIMConfig file

   (a) Copy the file Makefile.KIMConfig.example to Makefile.KIMConfig
       For example, if you untarred the `openkim-api-vX.X.X.tgz' tarball in
       your home directory, you would do:

       % cd $HOME/openkim-api-vX.X.X
       % cp Makefile.KIMConfig.example Makefile.KIMConfig

       The `%' symbol represents the bash sell prompt and should not be typed.

       (Above `vX.X.X' represents the current release number.)

   (b) Edit the file Makefile.KIMConfig and set the appropriate value for the 
       KIM_DIR variable.  This must expand to an absolute path.  Using the same
       assumptions as above, this would be

       KIM_DIR = $(HOME)/openkim-api-vX.X.X

   (c) If appropriate, set explicit values for the remaining three directories

       KIM_MODEL_DRIVERS_DIR =
       KIM_MODELS_DIR = 
       KIM_TESTS_DIR = 

       If these lines are commented out, defaults will be provided by the
       openkim-api make system.

   (d) Set the value of KIM_COMPILERSUITE.  Possible values are `GCC' and
       `INTEL'.

       KIM_COMPILERSUITE = GCC

   (e) Set the value of KIM_SYSTEMLINKER. Possible values are `linux',
       `freebsd', and `darwin'.

       KIM_SYSTEMLINKER = darwin

   (f) Set the value of KIM_SYSTEMARCH.  Possible values are `32bit' and
       `64bit'.

       KIM_SYSTEMARCH = 32bit

   (g) Set the value of KIM_LINK.  Possible values are `dynamic-load' and
       `static-link'.

       KIM_LINK = dynamic-load

       If KIM_LINK is set to dynamic-load, the makefile will build .so
       libraries (in addition to the static .a libraries) and KIM API will use
       those libraries to load models and call initialize routines dynamically
       (during runtime).  The use of dynamic linking may prevent problems of
       name clashes when multiple Models are used by a Test.  This is still
       being investigated.

   (h) Set override values for other variables, if necessary, by adding the
       desired variable name (after "# overwrite default variable values here"
       line) and filling in appropriate values.

       # overwrite default variable values

       # overwrite default compiler options
       CC =
       CXX =
       FC =

       # overwrite default compiler option flag lists
       FFLAGS   =
       CCFLAGS  =
       CXXFLAGS =
       LDFLAGS  =

       # overwrite default linker options
       LDSHAREDFLAG =
       LINKSONAME =
       LDWHOLEARCHIVESTARTFLAG =
       LDWHOLEARCHIVEENDFLAG =


2. In the remainder of the documentation we will use the string $KD to
   represent the location of the openkim source package (the value of the
   KIM_DIR variable discussed above).  If you wish to type the below commands
   exactly as written, set the shell variable KD to the appropriate value:

   bash:
   % export KD=$HOME/openkim-api-vX.X.X


3. To compile the package, including the provided examples, change to the
   KIM_DIR directory and execute `make examples':

   % cd $KD
   % make examples
   % make

     This builds all Models, Tests, and the openKIM API service routine
     library. The targets defined by the Makefile in this directory include:

       `make'                -- compiles the API and all Models and Tests
       `make all'            -- same as `make'
       `make examples'       -- copies examples into the appropriate
                                directories (no overwrite)
       `make examples-force' -- copies examples into the appropriate
                                directories (overwrite)
       `make openkim-api'    -- compiles only the API
       `make clean'          -- will remove appropriate .o, .mod, .a, .so and
                                executable files
       `make examples-clean' -- remove all examples from the MODEL_DRIVERs,
                                MODELs, and TESTs directories.

4. Verify that the compilation was successful by running a Test.

   The provided example Tests read in the name of a Model (or Models) which
   they use to perform their calculations.  For most Tests the name of the
   Model can be piped in using an `echo' command.  For example, the following
   Fortran 90 Test reads in one Model:

   % cd $KD/TESTs/ex_test_Ar_free_cluster_CLUSTER_F90
   % echo "ex_model_Ar_P_MLJ_CLUSTER_C" | ./ex_test_Ar_free_cluster_CLUSTER_F90

  (See the README files in the Test directories for an explanation of what
   the Tests do.)


5. Each Test (and Model) has its own make file for compiling and linking.  If
   changes are made to the code, perform step (3) again (from the $KD
   directory).


Once the installation is successfully completed, read the README file in
the DOCs directory for a step-by-step guide to learning the openKIM API.

*******************************************************************************

SUPPORT

If you have problems or questions, send an email with your question and all
relevant information to

openkim@googlegroups.com

The members of the openkim development team actively monitor this email list
and will do their best to help you with your question in a timely fashion.

*******************************************************************************
