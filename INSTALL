#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2014, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#    Ellad B. Tadmor
#    Valeriu Smirichinski
#

#
# Release: This file is part of the openkim-api.git repository.
#


=========================== The openkim-api package ===========================

This file contains instructions for installing the openkim-api package.
If you are new to KIM and the openkim-api (application programming interface)
start by reading the README file in this directory.

-------------------------------------------------------------------------------

SYSTEM REQUIREMENTS

To install the openkim-api package you need the following:

1. A Unix/Linux/Mac OSX/Cygwin system.

2. GNU make (3.81 or later), and

3. GNU compilers (gcc, g++, gfortran) version 4.2.x or higher or the
   corresponding Intel compilers, version 11.1 or higher.  NOTE: gfortran 4.6.x
   is known to have subtle bugs, and SHOULD NOT BE USED with the openkim-api
   software package.

-------------------------------------------------------------------------------

INSTRUCTIONS for installing, compiling and linking this openkim-api release:

0. If you have previously used the openkim-api package (versions 1.1.1 or
   below), it is recommended that you remove all associated environment
   variables from your environment.  (These include, KIM_DIR, KIM_INTEL,
   KIM_SYSTEM32, KIM_DYNAMIC, KIM_API_DIR, KIM_TESTS_DIR,
   KIM_MODEL_DRIVERS_DIR, and KIM_MODELS_DIR.)  All setting are now specified
   in the Makefile.KIM_Config file.

1. Set up the Makefile.KIM_Config file

   (a) Copy the file `Makefile.KIM_Config.example' to `Makefile.KIM_Config'.
       For example, if you untarred the `openkim-api-vX.X.X.tgz' tarball in
       your home directory, you would do:

       % cd ${HOME}/openkim-api-vX.X.X
       % cp Makefile.KIM_Config.example Makefile.KIM_Config

       The `%' symbol represents the bash sell prompt and should not be typed.

       (Above `vX.X.X' represents the current release number.)

   (b) Edit the file Makefile.KIM_Config and set the appropriate value for the
       KIM_DIR variable.  This must expand to an absolute path.  Using the same
       assumptions as above, this would be

       KIM_DIR = $(HOME)/openkim-api-vX.X.X

   (c) If appropriate, set explicit values for the remaining three directories

       KIM_MODEL_DRIVERS_DIR =
       KIM_MODELS_DIR =
       KIM_TESTS_DIR =

       If these lines are commented out, defaults will be provided by the
       openkim-api make system.

   (d) Set the value of KIM_COMPILERSUITE.  Possible values are `GCC' and
       `INTEL'.

       KIM_COMPILERSUITE = GCC

   (e) Set the value of KIM_SYSTEMLINKER. Possible values are `linux',
       `freebsd', and `darwin'.

       KIM_SYSTEMLINKER = linux

   (f) Set the value of KIM_SYSTEMARCH.  Possible values are `32bit' and
       `64bit'.

       KIM_SYSTEMARCH = 64bit

   (g) Set the value of KIM_LINK.  Possible values are `dynamic-load',
       `dynamic-link', and `static-link'.

       KIM_LINK = dynamic-load

       `dynamic-load' is the preferred option. (Unless performance or other
       issues require it, you should use dynamic-load.)  `dynamic-link' is like
       `dynamic-load' but does not use the dl.h library.  This option requires
       a more complicated Makefile process, but may improve computation time in
       some instances.  `static-link' only works with ONE Model and AT MOST ONE
       Model Driver (in order to avoid the possibility of symbol clashes).

       * NOTE: When using the dynamic-link or static-link settings the entire
               KIM API must be recompiled when the list of Model Drivers and/or
               Models to be compiled changes.  This is not the case for the
               dynamic-load setting.

   (h) Set the value of KIM_MAKE_VERBOSITY, if a value other than the default
       (`quiet') is desired.  Possible values are `quite' and `full'.

       KIM_MAKE_VERBOSITY = quiet

   (i) Override default compiler options and other variables, if necessary, by
       adding the desired variable name (after the "# override default compiler
       options and other variables here" line) and filling in appropriate
       values.


       # override default compiler options and other variables here

       # override default compiler options
       CC =
       CXX =
       FC =
       LD =

       # override default compiler option flag lists
       FFLAGS   =
       CCFLAGS  =
       CXXFLAGS =
       LDFLAGS  =
       LDLIBS   =

       # override default linker options
       LDSHAREDFLAG =
       LINKSONAME =
       LDWHOLEARCHIVESTARTFLAG =
       LDWHOLEARCHIVEENDFLAG =


       * NOTE: GCC 4.4 requires that LDLIBS be set as
               `LDLIBS = -lgfortran -lgfortranstart' or possibly
               `LD = $(FC)' and `LDLIBS = -lstdc++'.

       * NOTE: As of 2014-01-20, gfortran on Darwin OS (Mac OSX) has a bug
               associated with the use of iso_c_binding Fortran/C
               interoperability features which are now standard in openkim-api.
               (See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59888) We have
               reported this bug and are awaiting its fix.  In the meantime,
               the following workaround has been identified:

               (1) You must have a "multi-library" version of gfortran
                   installed on your mac due the need (see (ii) below) to
                   compile for a 32bit architecture.  This means that GCC must
                   have been configured with the "--enable-multilib" flag.  To
                   check your version execute `gfortran -v' and look for the
                   string "--enable-multilib".  In order to install a multilib
                   version of gfortran on your mac you can use a package
                   manager such as Homebrew, Mac Ports, or fink.  Follow the
                   instructions for installing the package manager of your
                   choice.  Then execute the command to install gfortran.

                   For Homebrew the command is:
                     % brew install gcc

                   For Mac Ports the command is:
                     % sudo port select --set gcc mp-gcc48
                     (Note, this may require that you compile the package from
                      source in order to get the correct version.)

               (2) You must compile the openkim-api and associated Models,
                   Tests, etc. using the `KIM_SYSTEMARCH = 32bit' setting.

               (3) You need to have the following line in this section of the
                   Makefile.KIM_Config file in order to avoid harmless compiler
                   warnings:
                     `LDFLAGS += -read_only_relocs suppress'

       * NOTE: For Cygwin systems add the following line `PICFLAG =' to avoid
               warnings about the -fPIC option.

   (j) Override default install options, if necessary, by adding the desired
       variable name (after the "# override default install options" line) and
       filling in appropriate values.

       # override default install directories
       package_name = # default is 'openkim-api'
       prefix =       # default is '/usr/local'
       includedir =   # default is '$(prefix)/include'
       exec_prefix =  # default is '$(prefix)'
       libdir =       # default is '$(exec_prefix)/lib'
       bindir =       # default is '$(exec_prefix)/bin'


       * NOTE: See item 6 below for more details on the installation process.

       * NOTE: The package_name variable is used as part of the installation
               directory name and the KIM API library file name.

       * NOTE: See the GNU Coding Standards, Section 7.2 for more details on
               the meaning of the remaining standard variables.

       * NOTE: Staged installs are supported via the DESTDIR variable.  See
         Section 7.2.4 of the GNU Coding Standards.

2. In the remainder of the documentation we will use the string ${KD} to
   represent the location of the openkim-api source package (the value of the
   KIM_DIR variable discussed above).  If you wish to, type the below commands
   exactly as written to set the shell variable KD to the appropriate value:

   % export KD=${HOME}/openkim-api-vX.X.X

3. To compile the package, including the provided examples, change to the
   ${KD} directory and execute `make examples' and then `make':

   % cd ${KD}
   % make examples
   % make

     This builds all Model Drivers, Models, Tests, and the openkim-api service
     routine library.  The targets defined by the Makefile in this directory
     include:

       `make'                -- compiles the API and all Models and Tests
       `make all'            -- same as `make'
       `make clean'          -- will remove appropriate .o, .mod, .a, .so and
                                executable files

       `make install'        -- install files to system-wide location as
                                described in item 6 below.

       `make uninstall'      -- delete files installed by `make install'
       `make examples'       -- copies examples into the appropriate
                                directories (no overwrite)
       `make examples-force' -- copies examples into the appropriate
                                directories (overwrite)
       `make examples-clean' -- remove all examples from the MODEL_DRIVERS,
                                MODELS, and TESTS directories.

     For system administrators there are also the following utility targets:

       `make install-set-default-to-vX'  -- This target creates generic
                                            ${includedir}/${package_name} and
                                            ${libdir}/${package_name} symlinks
                                            to the corresponding -vX versions.
                                            This effectively sets the "default"
                                            library available for users.
       `make uninstall-set-default'      -- This target removes the generic
                                            ${includedir}/${package_name} and
                                            ${libdir}/${package_name} symlinks.

4. Verify that the compilation was successful by running a Test.

   The provided example Tests read in the name of a Model (or Models) which
   they use to perform their calculations.  For most Tests the name of the
   Model can be piped in using an `printf' command.  For example, the following
   Fortran 2003 Test reads in one Model:

   % cd ${KD}/TESTS/ex_test_Ar_free_cluster_CLUSTER_F03
   % printf "ex_model_Ar_P_MLJ_CLUSTER_C" | ./ex_test_Ar_free_cluster_CLUSTER_F03

  (See the README files in the Test directories for an explanation of what
   the Tests do.)

5. Each Test (and Model) has its own Makefile for compiling and linking.  If
   changes are made to the code, perform the `make' portion of step 3 again
   (from the ${KD} directory).

6. If you wish, install the KIM API to the system-wide directories.  (Recall
   that if you are using the KIM_LINK=dynamic-link or KIM_LINK=static-link
   settings you must recompile and install the entire KIM API package in order
   to make changes (additions, deletions, updates) to the set of system-wide
   installed Model Drivers and Models.  Conversely, if you are using the
   KIM_LINK=dynmaic-load setting, then you can make changes to the system-wide
   installed Model Drivers and Models at any time.)

   % make install

   The compiled versions of the KIM API library, Model Drivers, and Models will
   be copied to `$(libdir)/$(full_package_name)'.  The default value for libdir
   is `$(exec_prefix)/lib', the default value for exec_prefix is `$(prefix)',
   and the default value for prefix is `/usr/local'.  Thus, the default value
   of libdir is `/usr/local/lib'.  The value of full_package_name is
   `$(package_name)-v$(VERSION_MAJOR)'.  Additionally the supporting header and
   mod files will be copied to `$(libdir)/$(full_package_name)/include' to
   support subsequent compilation against the installed KIM API package.

   If you want these files to be the default version of the KIM API package on
   your system (i.e., accessible via ${includedir}/${package_name} and
   ${libdir}/${package_name}), then do:

   % make install-set-default-to-vX

   Once the KIM API package has been installed, the original source directory
   (${KD}) may be deleted.

   If the KIM API was compiled with KIM_LINK=dynamic-load, the installed KIM
   API will look for Model Driver and Model directories in two different
   locations.  For Model Drivers the directories, listed in the order they are
   searched, are:

     `.'                                             ("CWD Model Drivers")
     `$(libdir)/$(full_package_name)/MODEL_DRIVERS/' ("System Model Drivers")

   For Models the directories, listed in the order they are searched, are:

     `.'                                             ("CWD Models")
     `$(libdir)/$(full_package_name)/MODELS/'        ("System Models")

   You can specify an additional directory to be searched by creating the file
   `${HOME}/.${package_name}/config-vX' where X is replaced by the major
   version number for this release of the openkim-api package (as defined in
   the file Makefile.Version).  The file `${HOME}/.${package_name}/config-vX'
   has a strict format.  It must contain exactly two lines.  These must be of
   the form:

     model_drivers_dir = XXX
     models_dir = YYY

   where XXX and YYY are replaced by paths (beginning with `/' or '~/' only)
   which indicate where you will store your Model Drivers and Models,
   respectively.  Once you have created this file the KIM API will use the
   following, modified, procedure.  For Model Drivers the directories, listed
   in the order they are searched, are:

     `.'                                             ("CWD Model Drivers")
     as listed in ${HOME}/.$(package_name)/config-vX ("User Model Drivers")
     `$(libdir)/$(full_package_name)/MODEL_DRIVERS/' ("System Model Drivers")

   For Models the directories, listed in the order they are searched, are:

     `.'                                             ("CWD Models")
     as listed in $(HOME)/.$(package_name)/config-vX ("User Models")
     `$(libdir)/$(full_package_name)/MODELS/'        ("System Models")

   If the KIM API has been installed using KIM_LINK=dynamic-load and the
   original source directory has been deleted, it is still possible to compile
   Model Drivers and Models.  These can be placed in the current working
   directory (CWD), or installed in the directory listed in the `config-vX'
   file, or installed in the system-wide Model Drivers and Models directories.
   To create a new Model Driver of Model and install it in the appropriate
   system-wide directory or in the directory listed in the `config-vX' file,
   follow these steps:

   (a) If you don't want to set up a user specified directory, skip to the next
       item.  Otherwise, create these files now (here we will use
       `~/my-kim-items' as an example):

       % package_name=openkim-api
       % mkdir ${HOME}/.${package_name}
       % cd ${HOME}/.${package_name}
       % printf "model_drivers_dir = ~/my-kim-items\n" > config-vX
       % printf "models_dir = ~/my-kim-items\n" >> config-vX

       Don't forget to replace `X' with the major version number of this
       package.  Although here we use the same directory for Model Drivers and
       Models, this is not necessary and separate directories may be specified.
       Now skip to step (c).

   (b) For those who want to work in the current directory (CWD) and/or install
       additional Model Drivers and Models system-wide, we'll create a set of
       temporaries directory in which to work (here we use `~/my-kim-items' as
       an example):

       % mkdir ${HOME}/my-kim-items

   (c) Next, for convenience, we'll create an environment variable pointing to
       our working directory:

       % WD=${HOME}/my-kim-items

   (d) Create a Makefile.KIM_Config in the ${WD} directory (assuming all default values):

       % libdir=/usr/local/lib
       % cd ${WD}
       % printf "include ${libdir}/${package_name}/Makefile.KIM_Config\n" > ${WD}/Makefile.KIM_Config

   (e) We'll work with the case of a Model Driver and an associated
       Parameterized Model such as those you can download from openkim.org.
       For example, execute the following commands:

       % md=EAM_Dynamo__MD_120291908751_000
       % wget --content-disposition "https://kim-items.openkim.org/archive?kimid=${md}&compression=gz"
       % tar zxvf ${md}.tgz
       % rm ${md}.tgz
       % mo=EAM_Dynamo_Angelo_Moody_NiAlH__MO_418978237058_000
       % wget --content-disposition "https://kim-items.openkim.org/archive?kimid=${mo}&compression=gz"
       % tar zxvf ${mo}.tgz
       % rm ${mo}.tgz

   (f) Compile the Model Driver and Model:

       % cd ${WD}/${md}
       % make
       % cd ${WD}/${mo}
       % make

       You can now use the Model from the current working directory (${WD}).
       For example, you could copy, compile and run the example Verification
       Check `vc_forces_numer_deriv':

       % cd ${WD}
       % cp ${KD}/EXAMPLES/TESTS/vc_forces_numer_deriv/* ${WD}
       % printf ',s|\.\./Makefile.KIM_Config|./Makefile.KIM_Config|g\nw\nq\n' | ed Makefile
       % make
       % printf ${mo} | ./vc_forces_numer_deriv

       If you have setup the config-vX file, you have a new Model installed in
       the user directory and you can skip the rest of the below steps.  In
       order to use your new Model you can, for example, compile and run the
       example Verification Check `vc_forces_numer_deriv' in whatever directory
       you like:

       % EXD=${HOME}/my-executable
       % mkdir ${EXD}
       % cd ${EXD}
       % cp ${KD}/EXAMPLES/TESTS/vc_forces_numer_deriv/* ${EXD}
       % printf "include ${prefix}/${libdir}/${package_name}/Makefile.KIM_Config\n" > ${EXD}/Makefile.KIM_Config
       % printf ',s|\.\./Makefile.KIM_Config|./Makefile.KIM_Config|g\nw\nq\n' | ed Makefile
       % make
       % printf ${mo} | ./vc_forces_numer_deriv

   (g) If you want to install this Model Driver and Model in the appropriate
       system-wide directories, then execute the following commands in order to
       do so:

       % cd ${WD}/${md}
       % make install
       % cd ${WD}/${mo}
       % make install

       (Note: for Parameterized Models you must install the associated Model
       Driver before installing the Model, as we have done above.)  You have
       now installed the Model Driver and Model to the system-wide directories
       and you can delete the source directories:

       % cd ${WD}
       % rm -rf ${WD}/${md}
       % rm -rf ${WD}/${mo}

Once the compilation (and optional installation) is successfully completed,
read the README file in the DOCs directory for a step-by-step guide to learning
the openkim-api.

*******************************************************************************

SUPPORT

If you have problems or questions, send an email with your question and all
relevant information to

openkim@googlegroups.com

The members of the openkim development team actively monitor this email list
and will do their best to help you with your question in a timely fashion.

*******************************************************************************
