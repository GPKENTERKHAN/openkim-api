#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#    Ellad B. Tadmor
#    Valeriu Smirichinski
#

#
# Release: This file is part of the openkim-api.git repository.
#


=========================== The openkim-api package ===========================

This file contains instructions for installing the openkim-api package.
If you are new to KIM and the openkim-api (application programming interface)
start by reading the README file in this directory.

-------------------------------------------------------------------------------

SYSTEM REQUIREMENTS

To install the openkim-api package you need the following:

1. A Unix/Linux/Mac OSX system.

2. GNU make, and

3. GNU compilers (gcc, g++, gfortran) version 4.2.x or higher or the
   corresponding Intel compilers, version 11.1 or higher.

-------------------------------------------------------------------------------

INSTRUCTIONS for installing, compiling and linking this openkim-api release:

0. If you have previously used the openkim-api package (versions 1.1.1 or
   below), it is recommended that you remove all associated environment
   variables from your environment.  (These include, KIM_DIR, KIM_INTEL,
   KIM_SYSTEM32, KIM_DYNAMIC, KIM_API_DIR, KIM_TESTS_DIR,
   KIM_MODEL_DRIVERS_DIR, and KIM_MODELS_DIR.)  All setting are now specified
   in the Makefile.KIM_Config file.

1. Set up the Makefile.KIM_Config file

   (a) Copy the file Makefile.KIM_Config.example to Makefile.KIM_Config
       For example, if you untarred the `openkim-api-vX.X.X.tgz' tarball in
       your home directory, you would do:

       % cd $HOME/openkim-api-vX.X.X
       % cp Makefile.KIM_Config.example Makefile.KIM_Config

       The `%' symbol represents the bash sell prompt and should not be typed.

       (Above `vX.X.X' represents the current release number.)

   (b) Edit the file Makefile.KIM_Config and set the appropriate value for the
       KIM_DIR variable.  This must expand to an absolute path.  Using the same
       assumptions as above, this would be

       KIM_DIR = $(HOME)/openkim-api-vX.X.X

   (c) If appropriate, set explicit values for the remaining three directories

       KIM_MODEL_DRIVERS_DIR =
       KIM_MODELS_DIR =
       KIM_TESTS_DIR =

       If these lines are commented out, defaults will be provided by the
       openkim-api make system.

   (d) Set the value of KIM_COMPILERSUITE.  Possible values are `GCC' and
       `INTEL'.

       KIM_COMPILERSUITE = GCC

   (e) Set the value of KIM_SYSTEMLINKER. Possible values are `linux',
       `freebsd', and `darwin'.

       KIM_SYSTEMLINKER = linux

   (f) Set the value of KIM_SYSTEMARCH.  Possible values are `32bit' and
       `64bit'.
 
       KIM_SYSTEMARCH = 64bit

   (g) Set the value of KIM_LINK.  Possible values are `dynamic-load',
       `dynamic-link', and `static-link'.

       KIM_LINK = dynamic-load

       `dynamic-load' is the preferred option. (Unless performance or other
       issues require it, you should use dynamic-load.)  `dynamic-link' is like
       `dynamic-load' but does not use the dl.h library.  This option requires
       a more complicated Makefile process, but may improve computation time in
       some instances.  `static-link' only works with ONE Model and AT MOST ONE
       Model Driver (in order to avoid the possibility of symbol clashes).

   (h) Set override values for other variables, if necessary, by adding the
       desired variable name (after the "# overwrite default variable values
       here" line) and filling in appropriate values.  (NOTE: GCC 4.4 requires
       that LDFLAGS be set as `LDFLAGS = -lgfortran -lgfortranstart' or
       possibly `LD = $(FC)' and `LDFLAGS = -lstdc++'.)

       # overwrite default variable values here

       # overwrite default compiler options
       CC =
       CXX =
       FC =
       LD = 

       # overwrite default compiler option flag lists
       FFLAGS   =
       CCFLAGS  =
       CXXFLAGS =
       LDFLAGS  =

       # overwrite default linker options
       LDSHAREDFLAG =
       LINKSONAME =
       LDWHOLEARCHIVESTARTFLAG =
       LDWHOLEARCHIVEENDFLAG =

       # overwrite default install directories
       package_name =
       prefix =
       libdir =


2. In the remainder of the documentation we will use the string $KD to
   represent the location of the openkim-api source package (the value of the
   KIM_DIR variable discussed above).  If you wish to, type the below commands
   exactly as written to set the shell variable KD to the appropriate value:

   bash:
   % export KD=$HOME/openkim-api-vX.X.X


3. To compile the package, including the provided examples, change to the
   $KD directory and execute `make examples' and then `make':

   % cd $KD
   % make examples
   % make

     This builds all Model Drivers, Models, Tests, and the openkim-api service
     routine library.  The targets defined by the Makefile in this directory
     include:

       `make'                -- compiles the API and all Models and Tests
       `make all'            -- same as `make'
       `make clean'          -- will remove appropriate .o, .mod, .a, .so and
                                executable files
       `make install'        -- install files to `/usr/local/lib' by default
       `make uninstall'      -- delete files installed by `make install'
       `make openkim-api'    -- compiles only the API
       `make examples'       -- copies examples into the appropriate
                                directories (no overwrite)
       `make examples-force' -- copies examples into the appropriate
                                directories (overwrite)
       `make examples-clean' -- remove all examples from the MODEL_DRIVERS,
                                MODELS, and TESTS directories.

4. Verify that the compilation was successful by running a Test.

   The provided example Tests read in the name of a Model (or Models) which
   they use to perform their calculations.  For most Tests the name of the
   Model can be piped in using an `echo' command.  For example, the following
   Fortran 90 Test reads in one Model:

   % cd $KD/TESTS/ex_test_Ar_free_cluster_CLUSTER_F90
   % echo "ex_model_Ar_P_MLJ_CLUSTER_C" | ./ex_test_Ar_free_cluster_CLUSTER_F90

  (See the README files in the Test directories for an explanation of what
   the Tests do.)


5. Each Test (and Model) has its own Makefile for compiling and linking.  If
   changes are made to the code, perform the `make' portion of step (3) again
   (from the $KD directory).


Once the installation is successfully completed, read the README file in
the DOCs directory for a step-by-step guide to learning the openkim-api.

*******************************************************************************

SUPPORT

If you have problems or questions, send an email with your question and all
relevant information to

openkim@googlegroups.com

The members of the openkim development team actively monitor this email list
and will do their best to help you with your question in a timely fashion.

*******************************************************************************
