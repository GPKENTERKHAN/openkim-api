#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2012, Regents of the University of Minnesota.  All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the openkim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck


# define list of Makefiles in the KIM make system to be used for dependencies
KIM_MAKE_FILES = $(KIM_DIR)/Makefile.KIMConfig       \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.Generic     \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.GNU         \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.Intel       \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck \

# set appropriate flag values
ifeq ($(KIM_SYSTEMARCH),32bit)
   KIM_ARCHTYPE = 0
else ifeq ($(KIM_SYSTEMARCH),64bit)
   KIM_ARCHTYPE = 1
endif

ifeq ($(KIM_LINK),static-link)
   KIM_LINK_VALUE = 0
else ifeq ($(KIM_LINK),dynamic-link)
   KIM_LINK_VALUE = 1
else ifeq ($(KIM_LINK),dynamic-load)
   KIM_LINK_VALUE = 2
endif

# Set compiler flag and define lists
COMMONFLAGS = -I$(KIM_DIR)/KIM_API                                  \
              -D KIM_ARCHTYPE=$(KIM_ARCHTYPE)                       \
              -D KIM_LINK_VALUE=$(KIM_LINK_VALUE)                   \
              -D KIM_LOG_DIR=\".\"                                  \
              -D KIM_DIR=\"$(KIM_DIR)\"                             \
              -D KIM_MODEL_DRIVERS_DIR=\"$(KIM_MODEL_DRIVERS_DIR)\" \
              -D KIM_MODELS_DIR=\"$(KIM_MODELS_DIR)\"               \
              -D KIM_TESTS_DIR=\"$(KIM_TESTS_DIR)\"

# Set common compiler flags for dynamic linking
ifeq ($(KIM_LINK),static-link)
   PICFLAG =
   LDDYNAMICFLAG =
endif


ifndef OSTYPE
  OSTYPE := $(shell echo $$OSTYPE)
endif

# set compiler flags for shared libraries
ifneq ($(KIM_LINK),static-link)
   LDSHAREDFLAG = -shared
   LINKSONAME = -Wl,-soname=
   LDWHOLEARCHIVESTARTFLAG = -Wl,--whole-archive
   LDWHOLEARCHIVEENDFLAG = -Wl,--no-whole-archive
   ifeq ($(OSTYPE),FreeBSD)
      LDSHAREDFLAG = -dynamiclib
   endif
   ifeq ($(findstring darwin,$(OSTYPE)),darwin)
      LINKSONAME = -Wl,-install_name,
      LDWHOLEARCHIVESTARTFLAG = -Wl,-force_load
      LDWHOLEARCHIVEENDFLAG =
   endif
endif

# Set correct lib file name depending on type of compilation
ifneq ($(KIM_LINK),static-link)
   KIM_LIB_FILE = $(KIM_DIR)/KIM_API/libkim.so
else
   KIM_LIB_FILE = $(KIM_DIR)/KIM_API/libkim.a
endif
KIM_LIB = -L$(KIM_DIR)/KIM_API/ -lkim

#set default goals allways all
.DEFAULT_GOAL := all

# C/C++ Compiler pattern rules
%.o:%.c Makefile    # C with preprocessing
	$(CC) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CCFLAGS) $<
%.o:%.i Makefile    # C without preprocessing
	$(CC) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CCFLAGS) $<
%.o:%.cpp Makefile  # C++ with preprocessing
	$(CXX) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.ii Makefile   # C++ without preprocessing
	$(CXX) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cc Makefile   # C++ with preprocessing
	$(CXX) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cxx Makefile  # C++ with preprocessing
	$(CXX) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cpp Makefile  # C++ with preprocessing
	$(CXX) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.C Makefile    # C++ with preprocessing
	$(CXX) $(PICFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(CXXFLAGS) $<

# Fortran Compiler pattern rules
# Fixed form code
%.o:%.f Makefile    # FORTRAN 77 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.for Makefile  # FORTRAN 77 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.ftn Makefile  # FORTRAN 77 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.fpp Makefile  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F Makefile    # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.FOR Makefile  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.FTN Makefile  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.FPP Makefile  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
# Free form code
%.o:%.f90 Makefile  # Fortran 90 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.f95 Makefile  # Fortran 95 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.f03 Makefile  # Fortran 2003 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.f08 Makefile  # Fortran 2008 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F90 Makefile  # Fortran 90 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F95 Makefile  # Fortran 95 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F03 Makefile  # Fortran 2003 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F08 Makefile  # Fortran 2008 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(COMMONFLAGS) $(OBJONLYFLAG) $(FFLAGS) $<

# Library pattern rule
%.so: %.a
	$(LD) $(LDSHAREDFLAG) $(LDFLAGS) $(OUTPUTINFLAG) $@  \
              $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) \
              -L$(KIM_DIR)/KIM_API/ -lkim $(LDDYNAMICLIB) $(XLANGLDLIBS)

# KIM descriptor file make rule
%_kim_str.cpp: %.kim
	echo "extern \"C\" {"           > $*_kim_str.cpp
	echo $(MODEL_NAME_KIM_STR_H)   >> $*_kim_str.cpp
	echo "}"                       >> $*_kim_str.cpp
	echo $(MODEL_NAME_KIM_STR_CPP) >> $*_kim_str.cpp
	echo "static char kimstr[] ="  >> $*_kim_str.cpp
	cat $(strip $(MODEL_NAME)).kim | tr -d '\r' | \
	sed -e 's,\\,\\\\,g'     \
            -e 's,",\\",g'       \
            -e 's,^,      ",g'   \
            -e 's,$$,\\n",g'           >> $*_kim_str.cpp
	echo "   ;"                    >> $*_kim_str.cpp
	echo "return &kimstr[0];"      >> $*_kim_str.cpp
	echo ""                        >> $*_kim_str.cpp
	echo "}"                       >> $*_kim_str.cpp
