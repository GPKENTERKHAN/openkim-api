#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the openkim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck


# define list of Makefiles in the KIM make system to be used for dependencies
KIM_MAKE_FILES = $(KIM_DIR)/Makefile.KIMConfig                           \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.Generic                 \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.LoadDefaults            \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck             \
                 $(KIM_DIR)/MAKE_SYSTEM/COMPILER_DEFAULTS/Makefile.GCC   \
                 $(KIM_DIR)/MAKE_SYSTEM/COMPILER_DEFAULTS/Makefile.INTEL \
                 $(KIM_DIR)/MAKE_SYSTEM/LINKER_DEFAULTS/Makefile.LINUX   \
                 $(KIM_DIR)/MAKE_SYSTEM/LINKER_DEFAULTS/Makefile.FREEBSD \
                 $(KIM_DIR)/MAKE_SYSTEM/LINKER_DEFAULTS/Makefile.DARWIN

# set appropriate flag values
ifeq ($(KIM_SYSTEMARCH),32bit)
   KIM_ARCHTYPE = 0
else ifeq ($(KIM_SYSTEMARCH),64bit)
   KIM_ARCHTYPE = 1
endif

ifeq ($(KIM_LINK),static-link)
   KIM_LINK_VALUE = 0
else ifeq ($(KIM_LINK),dynamic-link)
   KIM_LINK_VALUE = 1
else ifeq ($(KIM_LINK),dynamic-load)
   KIM_LINK_VALUE = 2
endif

# Set include flag
KIMINCLUDEFLAG = -I$(KIM_DIR)/KIM_API

# Set KIM define values to be used with KIMDEFINES when needed
KIM_DEFINE_VALUES =                    \
   -D KIM_ARCHTYPE=$(KIM_ARCHTYPE)     \
   -D KIM_LINK_VALUE=$(KIM_LINK_VALUE)

# Set common compiler flags for dynamic linking
ifeq ($(KIM_LINK),static-link)
   PICFLAG =
   LDDYNAMICFLAG =
endif

# Set correct lib file name depending on type of compilation
ifneq ($(KIM_LINK),static-link)
   KIM_LIB_FILE = $(KIM_DIR)/KIM_API/libkim.so
else
   KIM_LIB_FILE = $(KIM_DIR)/KIM_API/libkim.a
endif
KIM_LIB = -L$(KIM_DIR)/KIM_API/ -lkim

#set default goals allways all
.DEFAULT_GOAL := all

# C/C++ Compiler pattern rules
%.o:%.c Makefile    # C with preprocessing
	@printf "Creating... $@.\n"
	@$(CC) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CCFLAGS) $<
%.o:%.i Makefile    # C without preprocessing
	@printf "Creating... $@.\n"
	@$(CC) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CCFLAGS) $<
%.o:%.cpp Makefile  # C++ with preprocessing
	@printf "Creating... $@.\n"
	@$(CXX) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.ii Makefile   # C++ without preprocessing
	@printf "Creating... $@.\n"
	@$(CXX) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cc Makefile   # C++ with preprocessing
	@printf "Creating... $@.\n"
	@$(CXX) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cxx Makefile  # C++ with preprocessing
	@printf "Creating... $@.\n"
	@$(CXX) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cpp Makefile  # C++ with preprocessing
	@printf "Creating... $@.\n"
	@$(CXX) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.C Makefile    # C++ with preprocessing
	@printf "Creating... $@.\n"
	@$(CXX) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<

# Fortran Compiler pattern rules
# Fixed form code
%.o:%.f Makefile    # FORTRAN 77 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.for Makefile  # FORTRAN 77 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.ftn Makefile  # FORTRAN 77 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.fpp Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F Makefile    # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.FOR Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.FTN Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.FPP Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
# Free form code
%.o:%.f90 Makefile  # Fortran 90 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.f95 Makefile  # Fortran 95 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.f03 Makefile  # Fortran 2003 without preprocessing
	@printf "Creating... $@.\n"
	$@(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.f08 Makefile  # Fortran 2008 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F90 Makefile  # Fortran 90 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F95 Makefile  # Fortran 95 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F03 Makefile  # Fortran 2003 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<
%.o:%.F08 Makefile  # Fortran 2008 without preprocessing
	@printf "Creating... $@.\n"
	@$(FC) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $<

# Library pattern rule
%.so: %.a export-list.txt
	@printf "Creating... $@.\n"
	@$(LD) $(LDSHAREDFLAG) \
               $(LINKSONAME)$(if $(filter MODEL_NAME,$(.VARIABLES)),$(KIM_MODELS_DIR),$(KIM_MODEL_DRIVERS_DIR))/$*/$*.so \
               $(LDEXPORTLISTFLAG) $(LDFLAGS) $(OUTPUTINFLAG) $@  \
               $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) \
               $(if $(filter-out dynamic-load,$(KIM_LINK)),,-L$(KIM_DIR)/KIM_API/ -lkim) \
               $(if $(filter-out dynamic-link,$(KIM_LINK)),,$(if $(filter MODEL_DRIVER_NAME,$(.VARIABLES)),$(if $(filter MODEL_NAME,$(.VARIABLES)),$(KIM_MODEL_DRIVERS_DIR)/$(MODEL_DRIVER_NAME)/$(MODEL_DRIVER_NAME).so,),)) \
               $(LDDYNAMICLIB) $(XLANGLDLIBS)
	@$(LD) $(LDSHAREDFLAG) \
               $(LINKSONAME)$(DESTDIR)$(libdir)/$(package_name)/$(if $(filter MODEL_NAME,$(.VARIABLES)),MODELS,MODEL_DRIVERS)/$*/$*.so \
               $(LDEXPORTLISTFLAG) $(LDFLAGS) $(OUTPUTINFLAG) .$@  \
               $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) \
               $(if $(filter-out dynamic-load,$(KIM_LINK)),,$(KIM_DIR)/KIM_API/.libkim.so) \
               $(if $(filter-out dynamic-link,$(KIM_LINK)),,$(if $(filter MODEL_DRIVER_NAME,$(.VARIABLES)),$(if $(filter MODEL_NAME,$(.VARIABLES)),$(KIM_MODEL_DRIVERS_DIR)/$(MODEL_DRIVER_NAME)/.$(MODEL_DRIVER_NAME).so,),)) \
               $(LDDYNAMICLIB) $(XLANGLDLIBS)

# KIM descriptor file make rule
%_kim_str.cpp: %.kim
	@printf "Creating... intermediate file... $@.\n"
	@printf "extern \"C\" {\n"             > $*_kim_str.cpp
	@printf "$(MODEL_NAME_KIM_STR_H)\n"   >> $*_kim_str.cpp
	@printf "}\n"                         >> $*_kim_str.cpp
	@printf "$(MODEL_NAME_KIM_STR_CPP)\n" >> $*_kim_str.cpp
	@printf "static char kimstr[] =\n"    >> $*_kim_str.cpp
	@cat $(strip $(MODEL_NAME)).kim | tr -d '\r' | \
	 sed -e 's,\\,\\\\,g'     \
             -e 's,",\\",g'       \
             -e 's,^,      ",g'   \
             -e 's,$$,\\n",g'                 >> $*_kim_str.cpp
	@printf "   ;\n"                      >> $*_kim_str.cpp
	@printf "return &kimstr[0];\n"        >> $*_kim_str.cpp
	@printf "\n"                          >> $*_kim_str.cpp
	@printf "}\n"                         >> $*_kim_str.cpp


# INSTALL stuff
package_name = openkim-api
prefix = /usr/local
libdir = $(prefix)/lib
