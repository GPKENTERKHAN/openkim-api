#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2014, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the openkim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck


# define list of Makefiles in the KIM make system to be used for dependencies
KIM_MAKE_FILES = $(KIM_DIR)/Makefile.KIM_Config                           \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.Generic                 \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.LoadDefaults            \
                 $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck             \
                 $(KIM_DIR)/MAKE_SYSTEM/COMPILER_DEFAULTS/Makefile.GCC   \
                 $(KIM_DIR)/MAKE_SYSTEM/COMPILER_DEFAULTS/Makefile.INTEL \
                 $(KIM_DIR)/MAKE_SYSTEM/LINKER_DEFAULTS/Makefile.LINUX   \
                 $(KIM_DIR)/MAKE_SYSTEM/LINKER_DEFAULTS/Makefile.FREEBSD \
                 $(KIM_DIR)/MAKE_SYSTEM/LINKER_DEFAULTS/Makefile.DARWIN

# set appropriate flag values
ifeq      ($(KIM_MAKE_VERBOSITY),quiet)
  QUELL = @
else ifeq ($(KIM_MAKE_VERBOSITY),full)
  QUELL = # empty value
endif

ifeq ($(KIM_SYSTEMARCH),32bit)
   KIM_ARCHTYPE = 0
   ARCHFLAG = $(ARCH32FLAG)
else ifeq ($(KIM_SYSTEMARCH),64bit)
   KIM_ARCHTYPE = 1
   ARCHFLAG = $(ARCH64FLAG)
endif

ifeq ($(KIM_LINK),static-link)
   KIM_LINK_VALUE = 0
else ifeq ($(KIM_LINK),dynamic-link)
   KIM_LINK_VALUE = 1
else ifeq ($(KIM_LINK),dynamic-load)
   KIM_LINK_VALUE = 2
endif

# Set include flag
KIMINCLUDEFLAG = -I$(KIM_DIR)/KIM_API

# Set KIM define values to be used with KIMDEFINES when needed
KIM_DEFINE_VALUES =                    \
   -D KIM_ARCHTYPE=$(KIM_ARCHTYPE)     \
   -D KIM_LINK_VALUE=$(KIM_LINK_VALUE)

# Set common compiler flags for dynamic linking
ifeq ($(KIM_LINK),static-link)
   PICFLAG =
   LDDYNAMICFLAG =
endif

# Set correct lib file name depending on type of compilation
ifneq ($(KIM_LINK),static-link)
   KIMLIBFILE = $(KIM_DIR)/KIM_API/libkim.so
else
   KIMLIBFILE = $(KIM_DIR)/KIM_API/libkim.a
endif
KIMLIBFLAGS = -L$(KIM_DIR)/KIM_API/
KIMLIB      = -lkim

#set default goals allways all
.DEFAULT_GOAL := all

# C/C++ Compiler pattern rules
%.o:%.c Makefile    # C with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CC) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CCFLAGS) $<
%.o:%.i Makefile    # C without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CC) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CCFLAGS) $<
%.o:%.cpp Makefile  # C++ with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CXX) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.ii Makefile   # C++ without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CXX) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cc Makefile   # C++ with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CXX) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cxx Makefile  # C++ with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CXX) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.cpp Makefile  # C++ with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CXX) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<
%.o:%.C Makefile    # C++ with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(CXX) $(ARCHFLAG) $(PICFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(CXXFLAGS) $<

# Fortran Compiler pattern rules
# Fixed form code
%.o:%.f Makefile    # FORTRAN 77 without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FNOCPPFLAG) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.for Makefile  # FORTRAN 77 without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FNOCPPFLAG) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.ftn Makefile  # FORTRAN 77 without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FNOCPPFLAG) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.fpp Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.F Makefile    # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.FOR Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.FTN Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.FPP Makefile  # FORTRAN 77 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFIXEDFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
# Free form code
%.o:%.f90 Makefile  # Fortran 90 without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FNOCPPFLAG) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.f95 Makefile  # Fortran 95 without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FNOCPPFLAG) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.f03 Makefile  # Fortran 2003 without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FNOCPPFLAG) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.f08 Makefile  # Fortran 2008 without preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FNOCPPFLAG) $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.F90 Makefile  # Fortran 90 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.F95 Makefile  # Fortran 95 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.F03 Makefile  # Fortran 2003 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<
%.o:%.F08 Makefile  # Fortran 2008 with preprocessing
	@printf "Creating... $@.\n"
	$(QUELL)$(FC) $(ARCHFLAG) $(FFREEFLAG) $(FCPPFLAG)   $(PICFLAG) $(FCRAYFLAG) $(KIMINCLUDEFLAG) $(KIMDEFINES) $(OBJONLYFLAG) $(FFLAGS) $(FFORTRANFILEFLAG) $<

# Library pattern rule
%.so: %.a export-list.txt
	@printf "Creating... $@.\n"
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
               $(LINKSONAME)$(if $(filter-out dynamic-load,$(KIM_LINK)),$(if $(filter MODEL_NAME,$(.VARIABLES)),$(KIM_MODELS_DIR),$(KIM_MODEL_DRIVERS_DIR))/$*/,)$*.so \
               $(LDEXPORTLISTFLAG) $(LDFLAGS) $(OUTPUTINFLAG) $@  \
               $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) \
               $(if $(filter-out dynamic-load,$(KIM_LINK)),,$(KIMLIBFLAGS) $(KIMLIB)) \
               $(if $(filter-out dynamic-link,$(KIM_LINK)),,$(if $(filter MODEL_DRIVER_NAME,$(.VARIABLES)),$(if $(filter MODEL_NAME,$(.VARIABLES)),$(KIM_MODEL_DRIVERS_DIR)/$(MODEL_DRIVER_NAME)/$(MODEL_DRIVER_NAME).so,),)) \
               $(LDDYNAMICLIB) $(XLANGLDLIBS) $(LDLIBS)
        #INSTALLTAG - lines between tags will be removed by install target
	$(QUELL)$(LD) $(ARCHFLAG) $(LDSHAREDFLAG) \
               $(LINKSONAME)$(if $(filter-out dynamic-load,$(KIM_LINK)),$(DESTDIR)$(libdir)/$(package_name)/$(if $(filter MODEL_NAME,$(.VARIABLES)),MODELS,MODEL_DRIVERS)/$*/,)$*.so \
               $(LDEXPORTLISTFLAG) $(LDFLAGS) $(OUTPUTINFLAG) .$@  \
               $(LDWHOLEARCHIVESTARTFLAG) $< $(LDWHOLEARCHIVEENDFLAG) \
               $(if $(filter-out dynamic-load,$(KIM_LINK)),,$(KIM_DIR)/KIM_API/.libkim.so) \
               $(if $(filter-out dynamic-link,$(KIM_LINK)),,$(if $(filter MODEL_DRIVER_NAME,$(.VARIABLES)),$(if $(filter MODEL_NAME,$(.VARIABLES)),$(KIM_MODEL_DRIVERS_DIR)/$(MODEL_DRIVER_NAME)/.$(MODEL_DRIVER_NAME).so,),)) \
               $(LDDYNAMICLIB) $(XLANGLDLIBS) $(LDLIBS)
        #INSTALLTAG

# KIM descriptor file make rule
%_kim_str.cpp: %.kim $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)fl_size=`cat $*.kim | tr -d '\r' | wc -c`;\
         n=`expr $$fl_size / 65536 + 2`;\
         lines=`cat $*.kim | tr -d '\r' | wc -l`;\
         dl=`expr $$lines / $$n`;\
         printf "extern \"C\" {\n"                                                                 >  $*_kim_str.cpp;\
         printf "   extern const int $(strip $(MODEL_NAME_KIM_STR))_chunks = %i;\n" `expr $$n + 1` >> $*_kim_str.cpp;\
         printf "   extern const char* const $(strip $(MODEL_NAME_KIM_STR))[] =\n"                 >> $*_kim_str.cpp;\
         printf "   {\n"                                                                           >> $*_kim_str.cpp;\
         i=0;\
         while test $$i -le $$n; do \
            if test $$i -ne 0; then printf "\n      ,\n\n"                                         >> $*_kim_str.cpp; fi;\
            lnstart=`expr $$i '*' $$dl - 2`;\
            if test $$lnstart -le 0; then begdel=":dummy"; else begdel="1,$$lnstart d"; fi;\
            lnend=`expr \( $$i + 1 \) '*' $$dl - 1`;\
            cat $(strip $(MODEL_NAME)).kim | tr -d '\r' | \
            sed -e "$$begdel"        \
                -e "$$lnend,\$$ d"   \
                -e 's,\\,\\\\,g'     \
                -e 's,",\\",g'       \
                -e 's,^,      ",g'   \
                -e 's,$$,\\n",g'                                                                   >> $*_kim_str.cpp;\
            i=`expr $$i + 1`;\
        done;\
        printf "   };\n"                                                                           >> $*_kim_str.cpp;\
        printf "}\n"                                                                               >> $*_kim_str.cpp;
