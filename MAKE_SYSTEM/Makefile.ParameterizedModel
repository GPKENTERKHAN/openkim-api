#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2012, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the openkim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck


MODEL_BUILD_TARGET := $(strip $(MODEL_NAME)).a
ifneq ($(KIM_LINK),static-link)
   MODEL_BUILD_TARGET += $(patsubst %.a,%.so, $(MODEL_BUILD_TARGET))
else
   ifneq ("1","$(MAKELEVEL)")
     MODEL_BUILD_TARGET += STATIC_COMP_WARNING
   endif
endif

.PHONY: STATIC_COMP_WARNING
STATIC_COMP_WARNING:
	@echo ''; \
        echo '*************************************************************************'; \
        echo '*******               Compiling in static link mode               *******'; \
        echo '*******         You probably want to execute make from the        *******'; \
        echo '*******                     $$KIM_DIR directory                    *******'; \
        echo '*************************************************************************'; \

MODEL_NAME_KIM_STR_H = char* $(strip $(MODEL_NAME))_kim_str();
MODEL_NAME_KIM_STR_CPP = char* $(strip $(MODEL_NAME))_kim_str(){

all: $(strip $(MODEL_NAME)).kim $(MODEL_BUILD_TARGET)

species_list = $(sort $(strip $(filter SPECIES_%_NAME,$(.VARIABLES))))
paramfile_list =  $(sort $(strip $(filter PARAM_FILE_%_NAME,$(.VARIABLES))))

paramfile_num_list = $(strip $(subst _NAME,,$(subst PARAM_FILE_,,$(paramfile_list))))
paramfile_name_list = $(strip $(foreach paramfl,$(paramfile_list), $($(paramfl))))
num_paramfiles = $(words $(paramfile_num_list))

$(strip $(MODEL_NAME)).kim: $(KIM_MODEL_DRIVERS_DIR)/$(strip $(MODEL_DRIVER_NAME))/$(strip $(MODEL_DRIVER_NAME)).kim Makefile
	@printf "Creating... intermediate file... $@.\n"
	@$(foreach spec,$(filter-out $(shell cat $(KIM_MODEL_DRIVERS_DIR)/$(strip $(MODEL_DRIVER_NAME))/$(strip $(MODEL_DRIVER_NAME)).kim | \
                                      sed -e '/^SPECIES_\([0-9]\{3\}\)_NAME_STR.*$$/!d' -e 's/^\(SPECIES_[0-9]\{3\}_NAME\)_STR.*$$/\1/'), \
                                      $(species_list)),\
           echo "*** $(spec) is defined in Makefile, but $(spec)_STR is not in $(strip $(MODEL_DRIVER_NAME)).kim. ***" && echo && false;)
	@cat $(KIM_MODEL_DRIVERS_DIR)/$(strip $(MODEL_DRIVER_NAME))/$(strip $(MODEL_DRIVER_NAME)).kim | \
         sed -e "s,MODEL_NAME_STR,$(strip $(MODEL_NAME)),g"                                             \
             $(foreach spec,$(species_list),-e 's,$(spec)_STR,$($(spec)),g') \
             -e '/SPECIES_[0-9]\{3\}_NAME_STR/d' \
         > $(strip $(MODEL_NAME)).kim

$(strip $(MODEL_NAME)).cpp: $(KIM_DIR)/MAKE_SYSTEM/model_based_on_driver.cpp $(paramfile_name_list) Makefile
	@printf "Creating... intermediate file... $@.\n"
	@cat /dev/null > $(strip $(MODEL_NAME)).cpp
	@$(foreach flnum,$(paramfile_num_list),\
          echo "static char paramfile_$(flnum)[] ="                             >> $(strip $(MODEL_NAME)).cpp && \
          cat $(PARAM_FILE_$(flnum)_NAME) | tr -d '\r' | \
          sed -e 's,\\,\\\\,g'     \
              -e 's,",\\",g'       \
              -e 's,^,      ",g'   \
              -e 's,$$,\\n",g'                                                  >> $(strip $(MODEL_NAME)).cpp && \
          echo "   ;"                                                           >> $(strip $(MODEL_NAME)).cpp && \
          echo ""                                                               >> $(strip $(MODEL_NAME)).cpp;)
        # make sed script
	@echo "/PARAMFILE_POINTERS_GO_HERE;/ {" > tmp-sed-script
	@$(foreach flnum,$(paramfile_num_list),echo "i\\" >> tmp-sed-script; echo "   paramfile_strings[$(flnum)-1] = paramfile_$(flnum);" >> tmp-sed-script;)
	@echo "d" >> tmp-sed-script
	@echo "}" >> tmp-sed-script
        # create actual model code to call model driver
	@cat $(KIM_DIR)/MAKE_SYSTEM/model_based_on_driver.cpp | \
         sed -e "s,MODEL_DRIVER_NAME_STR,$(MODEL_DRIVER_NAME),g"                                              \
             -e "s,MODEL_NAME_STR,$(MODEL_NAME),g"                                                            \
             -e "s,MODEL_DRIVER_SO_NAME_STR,$(KIM_MODEL_DRIVERS_DIR)/$(strip $(MODEL_DRIVER_NAME))/$(strip $(MODEL_DRIVER_NAME)).so,g" \
             -e "s,NUM_PARAMFILES,$(num_paramfiles),g"                                                              \
             -f tmp-sed-script                                                   >> $(strip $(MODEL_NAME)).cpp
	@rm -f tmp-sed-script

$(strip $(MODEL_NAME)).a: $(strip $(MODEL_NAME)).o $(strip $(MODEL_NAME))_kim_str.o
	@printf "Creating... $@.\n"
	@ar rcs $@ $(strip $(MODEL_NAME)).o $(strip $(MODEL_NAME))_kim_str.o 

Makefile: $(KIM_MAKE_FILES) $(KIM_DIR)/MAKE_SYSTEM/Makefile.ParameterizedModel
	@touch Makefile

clean:
	@printf "Cleaning... Parameterized Model... $(MODEL_NAME).\n"
	@rm -f $(addprefix $(strip $(MODEL_NAME)).,cpp o a so) $(strip $(MODEL_NAME)).kim $(addprefix $(strip $(MODEL_NAME))_kim_str.,cpp o)
