#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2014, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the openkim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/MAKE_SYSTEM/Makefile.SanityCheck

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))
MODEL_DRIVER_NAME := $(strip $(MODEL_DRIVER_NAME))

# Set defines
KIMDEFINES = $(KIM_DEFINE_VALUES)

MODEL_BUILD_TARGET := $(MODEL_NAME).a
ifneq ($(KIM_LINK),static-link)
   MODEL_BUILD_TARGET += $(patsubst %.a,%.so, $(MODEL_BUILD_TARGET))
else
   ifneq ("1","$(MAKELEVEL)")
     MODEL_BUILD_TARGET += STATIC_COMP_WARNING
   endif
endif

.PHONY: STATIC_COMP_WARNING clean install uninstall
STATIC_COMP_WARNING:
	@printf '\n'; \
        printf '*******************************************************************************\n'; \
        printf '*******                  Compiling in static link mode                  *******\n'; \
        printf '*******            You probably want to execute make from the           *******\n'; \
        printf '*******                        $$KIM_DIR directory                       *******\n'; \
        printf '*******************************************************************************\n'; \

$(KDF_STR_NAME).cpp: $(MODEL_NAME).kim

all: $(MODEL_NAME).kim $(MODEL_BUILD_TARGET)

ifeq (yes,$(shell if test -f $(HOME)/.$(package_name)/config-v$(VERSION_MAJOR); then printf "yes"; fi))
   USERDIR = $(wildcard $(shell grep model_drivers_dir $(HOME)/.$(package_name)/config-v$(VERSION_MAJOR) | sed -e 's/[^=]*=[[:space:]]*//'))
else
   USERDIR = /doesnotexist
endif

ifeq      (yes,$(shell if test -d ../$(MODEL_DRIVER_NAME); then printf "yes"; fi))
   driver_location         := ..
else ifeq (yes,$(shell if test -d $(USERDIR); then printf "yes"; fi))
   driver_location         := $(USERDIR)
else
   driver_location         := $(KIM_MODEL_DRIVERS_DIR)
endif

species_list = $(sort $(strip $(filter SPECIES_%_NAME,$(.VARIABLES))))
paramfile_list =  $(sort $(strip $(filter PARAM_FILE_%_NAME,$(.VARIABLES))))

paramfile_num_list = $(strip $(subst _NAME,,$(subst PARAM_FILE_,,$(paramfile_list))))
paramfile_name_list = $(strip $(foreach paramfl,$(paramfile_list), $($(paramfl))))
num_paramfiles = $(words $(paramfile_num_list))

$(MODEL_NAME).kim: $(driver_location)/$(MODEL_DRIVER_NAME)/$(MODEL_DRIVER_NAME).kim Makefile
	@printf "Creating... $@.\n"
	$(QUELL)$(foreach spec,$(filter-out $(shell cat $(driver_location)/$(MODEL_DRIVER_NAME)/$(MODEL_DRIVER_NAME).kim |            \
                                                    sed -e '/^SPECIES_\([0-9]\{3\}\)_NAME_STR.*$$/!d' -e 's/^\(SPECIES_[0-9]\{3\}_NAME\)_STR.*$$/\1/'), \
                                            $(species_list)),\
                    printf "*** $(spec) is defined in Makefile, but $(spec)_STR is not in $(MODEL_DRIVER_NAME).kim. ***\n\n" && false;)
	$(QUELL)cat $(driver_location)/$(MODEL_DRIVER_NAME)/$(MODEL_DRIVER_NAME).kim | \
                sed -e "s,MODEL_NAME_STR,$(MODEL_NAME),g"                              \
                    $(foreach spec,$(species_list),-e 's,$(spec)_STR,$($(spec)),g')    \
                    -e '/SPECIES_[0-9]\{3\}_NAME_STR/d'                                \
                > $(MODEL_NAME).kim

.INTERMEDIATE: $(MODEL_NAME).cpp
$(MODEL_NAME).cpp: $(KIM_DIR)/MAKE_SYSTEM/model_based_on_driver.cpp $(paramfile_name_list) Makefile
	@printf "Creating... intermediate file... $@.\n"
	$(QUELL)cat /dev/null > $(MODEL_NAME).cpp
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            fl_name=$(PARAM_FILE_$(flnum)_NAME);\
            fl_size=`cat $$fl_name | tr -d '\r' | wc -c`;\
            n=`expr $$fl_size / 65536 + 2`;\
            lines=`cat $$fl_name | tr -d '\r' | wc -l`;\
            dl=`expr $$lines / $$n`;\
            printf "static const int paramfile_$(flnum)_chunks = %i;\n" `expr $$n + 1` >> $(MODEL_NAME).cpp;\
            printf "static const char* const paramfile_$(flnum)[] =\n"                 >> $(MODEL_NAME).cpp;\
            printf "{\n"                                                               >> $(MODEL_NAME).cpp;\
            i=0;\
            while test $$i -le $$n; do \
               if test $$i -ne 0; then printf "\n   ,\n\n"                             >> $(MODEL_NAME).cpp; fi;\
               lnstart=`expr $$i '*' $$dl - 2`;\
               if test $$lnstart -le 0; then begdel=":dummy"; else begdel="1,$$lnstart d"; fi;\
               lnend=`expr \( $$i + 1 \) '*' $$dl - 1`;\
               cat $$fl_name | tr -d '\r' | \
               sed -e "$$begdel"        \
                   -e "$$lnend,\$$ d"   \
                   -e 's,\\,\\\\,g'     \
                   -e 's,",\\",g'       \
                   -e 's,^,   ",g'      \
                   -e 's,$$,\\n",g'                                                    >> $(MODEL_NAME).cpp;\
               i=`expr $$i + 1`;\
           done;\
           printf "};\n\n"                                                             >> $(MODEL_NAME).cpp;\
         )
        # make sed script
	$(QUELL)printf "/PARAMFILE_POINTERS_GO_HERE;/ {\n" > tmp-sed-script
	$(QUELL)$(foreach flnum,$(paramfile_num_list),printf 'i\\\n' >> tmp-sed-script; printf "   paramfile_strings[$(flnum)-1] = (const char**) paramfile_$(flnum);\n" >> tmp-sed-script;)
	$(QUELL)printf "d\n" >> tmp-sed-script
	$(QUELL)printf "}\n" >> tmp-sed-script
	$(QUELL)printf "/PARAMFILE_CHUNKS_GO_HERE;/ {\n" >> tmp-sed-script
	$(QUELL)$(foreach flnum,$(paramfile_num_list),printf 'i\\\n' >> tmp-sed-script; printf "   paramfile_strings_chunks[$(flnum)-1] = paramfile_$(flnum)_chunks;\n" >> tmp-sed-script;)
	$(QUELL)printf "d\n" >> tmp-sed-script
	$(QUELL)printf "}\n" >> tmp-sed-script
        # create actual model code to call model driver
	$(QUELL)cat $(KIM_DIR)/MAKE_SYSTEM/model_based_on_driver.cpp |                                                                          \
                sed -e "s,MODEL_DRIVER_NAME_STR,$(MODEL_DRIVER_NAME),g"                                                                         \
                    -e "s,MODEL_NAME_STR,$(MODEL_NAME),g"                                                                                       \
                    -e "s,NUM_PARAMFILES,$(num_paramfiles),g"                                                                                   \
                    -f tmp-sed-script                                                   >> $(MODEL_NAME).cpp
	$(QUELL)rm -f tmp-sed-script

$(MODEL_NAME).a: $(MODEL_NAME).o $(KDF_STR_NAME).o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(MODEL_NAME).o $(KDF_STR_NAME).o

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES) Makefile
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_$(MODEL_NAME)_init_pointer\n"             > $@
	$(QUELL)printf "_$(MODEL_NAME)_$(KDF_STR_NAME)\n"         >> $@
	$(QUELL)printf "_$(MODEL_NAME)_$(KDF_STR_NAME)_chunks\n"  >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                         > $@
	$(QUELL)printf "   global:\n"                               >> $@
	$(QUELL)printf "           $(MODEL_NAME)_init_pointer;\n"   >> $@
	$(QUELL)printf "           $(KDF_STR_NAME);\n"              >> $@
	$(QUELL)printf "           $(KDF_STR_NAME)_chunks;\n"       >> $@
	$(QUELL)printf "\n"                                         >> $@
	$(QUELL)printf "   local: *;\n"                             >> $@
	$(QUELL)printf "};\n"                                       >> $@
endif

Makefile: $(KIM_MAKE_FILES) $(KIM_DIR)/MAKE_SYSTEM/Makefile.ParameterizedModel
	$(QUELL)touch Makefile

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f $(addprefix $(MODEL_NAME).,o a so) .$(MODEL_NAME).so $(MODEL_NAME).kim $(KDF_STR_NAME).o

install: all
	@printf "Installing...($(DESTDIR)$(libdir)/$(package_name)/MODELS).......... Model.......... $(MODEL_NAME)"
ifneq (static-link,$(KIM_LINK))
	@printf ".\n"
	$(QUELL)if test \( x"$(driver_location)" != x"$(KIM_MODEL_DRIVERS_DIR)" \); then                         \
                   printf "  Cannot install a Parameterized Model whose associated Model Driver\n";              \
                   printf "  has not been installed.  Please install the Model Driver and try again.\n";         \
                  false;                                                                                         \
                fi
	$(QUELL)mkdir -p $(DESTDIR)$(libdir)/$(package_name)/MODELS/$(MODEL_NAME)
	$(QUELL)cp $(if $(KIM_INSTALLED),,.)$(MODEL_NAME).so $(DESTDIR)$(libdir)/$(package_name)/MODELS/$(MODEL_NAME)/$(MODEL_NAME).so
	$(QUELL)chmod 644 $(DESTDIR)$(libdir)/$(package_name)/MODELS/$(MODEL_NAME)/$(MODEL_NAME).so
else
	@printf ": nothing to be done for static-link.\n"
endif

uninstall:
	@printf "Uninstalling...($(DESTDIR)$(libdir)/$(package_name)/MODELS).......... Model.......... $(MODEL_NAME)"
ifneq (static-link,$(KIM_LINK))
	@printf ".\n"
	$(QUELL)rm -f "$(DESTDIR)$(libdir)/$(package_name)/MODELS/$(MODEL_NAME)/$(MODEL_NAME).so"
	$(QUELL)if test \( -d "$(DESTDIR)$(libdir)/$(package_name)/MODELS/$(MODEL_NAME)" \); then rmdir "$(DESTDIR)$(libdir)/$(package_name)/MODELS/$(MODEL_NAME)" >& /dev/null; fi
else
	@printf ": nothing to be done for static-link.\n"
endif
