#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2012, Regents of the University of Minnesota.  All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the openkim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
ifndef KIM_MODEL_DRIVERS_DIR
   $(error Make variable KIM_MODEL_DRIVERS_DIR must be defined)
endif
ifndef KIM_MODELS_DIR
   $(error Make variable KIM_MODELS_DIR must be defined)
endif
ifndef KIM_TESTS_DIR
   $(error Make variable KIM_TEST_DIR must be defined)
endif

# Determine whether a 32 bit or 64 bit compile should be use
ifeq ($(KIM_SYSTEM32), yes)
   MACHINESYSTEM=SYSTEM32
else 
   ifeq ($(KIM_SYSTEM32), no)
      MACHINESYSTEM=SYSTEM64
   else
      $(error Make variable KIM_SYSTEM32 must be 'yes' or 'no')
   endif
endif

# Set compiler flag and define lists
COMMONFLAGS = -I$(KIM_API_DIR)                                      \
              -D $(MACHINESYSTEM)                                   \
              -D KIM_DIR=\"$(KIM_DIR)\"                             \
              -D KIM_DIR_API=\"$(KIM_API_DIR)\"                     \
              -D KIM_DIR_MODELS=\"$(KIM_MODELS_DIR)\"               \
              -D KIM_DIR_TESTS=\"$(KIM_TESTS_DIR)\"                 \
              -D KIM_DIR_MODEL_DRIVERS=\"$(KIM_MODEL_DRIVERS_DIR)\" \
              -D KIM_DIR_LOG=\".\"
# add dynamic define if appropriate
ifdef KIM_DYNAMIC
   COMMONFLAGS += -D KIM_DYNAMIC=\"$(KIM_DYNAMIC)\"
endif

# Set common compiler flags for dynamic linking
ifndef KIM_DYNAMIC
   PICFLAG =
   LDDYNAMICFLAG =
endif


ifndef OSTYPE
  OSTYPE := $(shell echo $$OSTYPE)
endif

# set compiler flags for shared libraries
ifdef KIM_DYNAMIC
   LDSHAREDFLAG = -shared
   ifeq ($(OSTYPE),FreeBSD)
      LDSHAREDFLAG = -dynamiclib
   endif
   LINKSONAME = -Wl,-soname=
   ifeq ($(findstring darwin,$(OSTYPE)),darwin)
      LINKSONAME = -Wl,-install_name,
   endif
endif

# Set correct lib file name depending on type of compilation
ifdef KIM_DYNAMIC
   KIM_LIB_FILE = $(KIM_API_DIR)/libkim.so
else
   KIM_LIB_FILE = $(KIM_API_DIR)/libkim.a
endif
KIM_LIB = -L$(KIM_API_DIR)/ -lkim

#set default goals allways all
.DEFAULT_GOAL := all

# C/C++ Compiler pattern rules
%.o:%.c    # C with preprocessing
	$(CC) $(PICFLAG) $(CCFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.i    # C without preprocessing
	$(CC) $(PICFLAG) $(CCFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.cpp  # C++ with preprocessing
	$(CXX) $(PICFLAG) $(CXXFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.ii   # C++ without preprocessing
	$(CXX) $(PICFLAG) $(CXXFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.cc   # C++ with preprocessing
	$(CXX) $(PICFLAG) $(CXXFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.cxx  # C++ with preprocessing
	$(CXX) $(PICFLAG) $(CXXFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.cpp  # C++ with preprocessing
	$(CXX) $(PICFLAG) $(CXXFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.C    # C++ with preprocessing
	$(CXX) $(PICFLAG) $(CXXFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<

# Fortran Compiler pattern rules
# Fixed form code
%.o:%.f    # FORTRAN 77 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.for  # FORTRAN 77 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.ftn  # FORTRAN 77 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.fpp  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.F    # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.FOR  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.FTN  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.FPP  # FORTRAN 77 with preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
# Free form code
%.o:%.f90  # Fortran 90 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.f95  # Fortran 95 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.f03  # Fortran 2003 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.f08  # Fortran 2008 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.F90  # Fortran 90 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.F95  # Fortran 95 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.F03  # Fortran 2003 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<
%.o:%.F08  # Fortran 2008 without preprocessing
	$(FC) $(PICFLAG) $(FCRAYFLAG) $(FFLAGS) $(COMMONFLAGS) $(OBJONLYFLAG) $<

# Library pattern rule
%.so: %.a
	$(LD) $(LDSHAREDFLAG) $(OUTPUTINFLAG) $@  *.o -L$(KIM_API_DIR)/ -lkim $(LDDYNAMICLIB) $(XLANGLDLIBS)

# KIM descriptor file make rule
%_kim_str.cpp: %.kim
	echo "extern \"C\" {"           > $*_kim_str.cpp
	echo $(MODEL_NAME_KIM_STR_H)   >> $*_kim_str.cpp
	echo "}"                       >> $*_kim_str.cpp
	echo $(MODEL_NAME_KIM_STR_CPP) >> $*_kim_str.cpp
	echo "static char kimstr[] ="  >> $*_kim_str.cpp
	cat $(strip $(MODEL_NAME)).kim | tr -d '\r' | \
	sed -e 's,\\,\\\\,g'     \
            -e 's,",\\",g'       \
            -e 's,^,      ",g'   \
            -e 's,$$,\\n",g'           >> $*_kim_str.cpp
	echo "   ;"                    >> $*_kim_str.cpp
	echo "return &kimstr[0];"      >> $*_kim_str.cpp
	echo ""                        >> $*_kim_str.cpp
	echo "}"                       >> $*_kim_str.cpp
