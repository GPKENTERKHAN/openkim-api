=========================== The openkim-api package ===========================

OVERVIEW:

Atomistic or molecular simulations of materials have the potential to play a
key role in the development of innovative technology to address many problems
the world is currently facing (including climate change, energy generation and
distribution, and terrorism). Recent examples, where valuable contributions and
greater insight have been obtained, include applications in chemistry and
organic chemistry, nanoindentation and tribology, materials processing and
properties, and nanotechnology and nanofluidics. To model the large numbers of
atoms required for many applications, and to be able to study their dynamics
over reasonable time scales, it is generally necessary to develop approximate
models of interatomic bonding, referred to as "interatomic potentials" or
"interatomic models".  Once such a model is at hand, one can theoretically
predict almost any mechanical or thermal property or behavior of the element
(or elements) it purports to describe. Generally, these models define the
forces and energies used for sophisticated simulations using methodologies such
as molecular dynamics, Monte Carlo, lattice dynamics free energy methods,
multiscale methods, and so on. From such simulations, complex materials
properties and phenomena can be extracted, including such things as melting
temperatures, solid-liquid interface phenomena, fracture properties, and
dislocation nucleation and motion.  This software package implements the
standards being developed as part of the Knowledgebase of Interatomic Models
(KIM). KIM (http://openKIM.org) is a current initiative to develop and
implement standards for the atomistic simulation of materials.  The effort aims
to help bring order to the efforts of the education, research, and industrial
communities and to make it easier for new (and existing) scientists to leverage
the work of other in this important field. The KIM project has two main
objectives:

1. Development of an online resource for standardized testing, permanent
warehousing and easy retrieval of interatomic potentials and data. This
includes the development of application programming interface (API) standards
for coupling simulation codes and interatomic potential subroutines [this
package].

2. Development of a quantitative theory of interatomic potential
transferability providing rigorous criteria for selecting potentials for given
applications and error bounds on results.



THE OPENKIM-API PACKAGE:

The openkim-api package aims to give computer programmers the ability to write
atomistic or molecular simulation programs and routines capable of seamlessly
interfacing and interacting with other programs and routines, regardless of the
programming language (C, C++, FORTRAN 77, Fortran 90/95/2003, Python, etc.) in
which the codes are written.

The current version of the openkim-api package supports the following features:

* Currently supported programming languages: C, C++, FORTRAN 77, FORTRAN 90/95/2003

* Support for static and dynamic linking of programs using the openkim-api

* Communication of an arbitrary number of `arguments' between a `Model' (interatomic
  potential) and a `Test' (simulation code that uses a Model).  This is facilitated
  by the use of KIM descriptor files and a single KIM API object data strucutre
  that stores all needed information to be communicated between a Model and a Test.

* Data types: integer, integer*8 (long long), real (float), real*8 (double),
              method (for exchanging pointers to functions), pointer (for
              exchanging "everything else").  Each of these data types can be
              use to create multi-dimensional array `arguments' that are
              exchanged between Models and Tests.  
  Currently, the openkim-api does not define any (more complex) data
  structures.  However, in the future (as the need arises, and in consultation
  with the atomistic and molecular simulation community) additional data types
  and data structures may be introduced.

* Physical Units: The openkim-api supports the specification of physical units
  for each `argument' exchanged between a Model and Test.  Currently, this
  information is only used to ensure that a Model and Test agree on the units
  of the arguments they will exchange.  Future plans include the possibility of
  the openkim-api package performing automatic units conversions for Models and
  Tests that use different physical units, but are otherwise compatible.

* Neighbor lists and Boundary Conditions (NBC) scenarios: To facilitate
  computational efficiency, the openkim-api defines a number of scenarios by
  which a Test may provide a Model with information about the neighbors of each
  atom in a configuration.  These currently include options that allow for
  common techniques as, the use of the `minimum image' convention for
  orthogonal periodic boundary conditions, `ghost atoms', and neighbor lists
  with relative position vectors.

* Atom Species: The openkim-api provides the ability to designate the physical
  species of each particle in a simulation.  Currently, only one identifier is
  provided for each element in the periodic table.  In the future support for
  Models such as CHARRM and similar force-fields will be added.

* Model Parameters: The openkim.org philosophy views a `Model' as a well
  defined computational code that includes fixed specific values for all
  parameters needed to perform an actual computation.  However, it is often
  useful to explore how a Model's predictions vary as the values of its
  parameters are varied.  For this reason, the openkim-api provides the ability
  for a Model to `publish' its parameters so that a Test may modify them.


-------------------------------------------------------------------------------

This directory (by default, openkim-api-XX.XX.XX) contains the following files
and directories:

DOCs          -- document ion directory. This directory contains the file
                 KIM_API_alpha_overview.pdf which provides an overview of
                 this release of the openkim-api package, and links to the
                 files KIMserviceDescriptions.txt and standard.kim.

EXAMPLE_LEGOS -- directory containing the picies of example models and
                 tests that are used to automatically generate working
                 examples. (This organization facilitates easy maintence
                 of the examples.)

KIM_API       -- directory containing the openkim-api service routines
        
MODELs        -- directory containing examples of interatomic Models

Makefile      -- make file for compiling the openkim-api services routines and
                 example Tests and Models.

README        -- this file
 
TESTs         -- directory containing examples of Tests

-------------------------------------------------------------------------------
